<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[NYIST-软件ACM集训队招新介绍]]></title>
    <url>%2F2018%2F09%2F17%2F2018ACM%2F</url>
    <content type="text"><![CDATA[什么是ACM？ACM国际大学生程序设计竞赛（英语：ACM International Collegiate Programming Contest, ICPC）是由美国计算机协会（ACM）主办的，一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。经过30多年的发展，ACM国际大学生程序设计竞赛已经发展成为最具影响力的大学生计算机竞赛。 除此之外，ACM现已广泛指代大部分大学生算法竞赛。 为什么要加入ACM集训队？ 不管在什么时候，算法都是计算机科学领域最重要的基石之一。ACMer扎实的算法基础和编程能力更受企业青睐。 软件ACM集训队是我校竞争力最强的工作室之一，每年软件ACM集训队都会派出队伍参加ACM亚洲区域赛，国赛，省赛以及各种程序设计竞赛，并多次取得不俗的成绩。 软件ACM集训队提供了一个良好的学习环境，学习，其实最重要的是环境。 与全国各大高校同台竞技，开阔视野，让你见识到这个领域内最牛逼的那一批同龄人是怎样的水准，自己距离他们有多大的差距。 很多往届学长在 BAT 等知名公司就职，会有很多内推机会。 ACM竞赛成绩对考研有很大加成。 公费旅游 集训队的主要学习内容 我们的目标是通过不断的学习编程及算法，来参加各大算法竞赛及各类编程比赛（穷游全国） 附上一个知乎问题，大家可以看看回答: ACM 的正确入门方式是什么？ 我们主要参加以下几类竞赛: ACM-ICPC World Final （雾 ACM-ICPC国际大学生程序设计竞赛亚洲区域赛 ACM-ICPC国际大学生程序设计竞赛各省省赛以及邀请赛 CCPC中国大学生程序设计竞赛 &quot;蓝桥杯&quot;竞赛 CCCC“中国高校计算机大赛-团体程序设计天梯赛” 以及其他类型的编程竞赛 ACM竞赛的简要规则虽然不同比赛规则大相径庭,但最为广泛通用是以ACM-ICPC竞赛为基础的规则。 ACM-ICPC以团队的形式代表各学校参赛，每队由3名队员组成。比赛期间，每队使用1台计算机需要在5个小时内使用C、C++或Java中的一种编写程序解决8到13个问题。程序完成之后提交裁判运行，运行的结果会判定为”AC(正确)/WA（错误）/TLE（超时）/MLE（超出内存限制）/RE（运行错误）/PE（格式错误）”中的一种并及时通知参赛队。每队在正确完成一题后，组织者将在其位置上升起一只代表该题颜色的气球。最后的获胜者为正确解答题目最多且总用时最少的队伍。每道试题用时将从竞赛开始到试题解答被判定为正确为止，其间每一次提交运行结果被判错误的话将被加罚20分钟时间，未正确解答的试题不记时。 与其它计算机程序竞赛（例如国际信息学奥林匹克，IOI）相比，ACM-ICPC赛制的特点在于其为3人团队作战且题量大，每队需要5小时内完成11道题目，甚至更多。除此之外，一支队伍有3名队员却只有1台计算机，使得时间显得更为紧张。因此除了扎实的编程能力，良好的团队协作和心理素质同样是获胜的关键。 ACM集训队的选拔制度我们会在军训结束后进行简单的C语言培训，国庆期间也会组织有关C语言和简单算法的集训，所有人都可以报名参加。不要担心零基础的问题，我们保证讲到你们听懂为止。我们会在集训后举办一系列的招选拔赛和月赛，根据名次来决定具体的人选，具体请加入2018软件ACM迎新群:839634547 其他特别感谢计科ACM工作室，尤其要感谢hpc大佬 我们采用在线评测系统(online judge)进行训练 本校oj地址: www.nswoj.com (软院搭建 仅内网登录) fzhai.xin (软院搭建) nyoj.top (计科搭建) acm.nyist.edu.cn (老OJ) 不论是学习，生活还是什么方面的问题都会有学长学姐耐心解答。 如果高中有信息学竞赛（NOIP）的经历，可以直接联系我们 最终解释权归南阳理工学院软件学院ACM集训队所有]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[nowcoder190 B-自杀游戏（DP递推 or 记忆化搜索）]]></title>
    <url>%2F2018%2F09%2F17%2Fnowcoder190%20B-%E8%87%AA%E6%9D%80%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[描述传送门：自杀游戏 Alice和Bob产生了不可调节的矛盾，于是他们相约一起玩一个自杀游戏，输的人就会从这个世界上消失。 游戏开始时，Alice手上拿着一个定时炸弹，炸弹有个倒计时t。炸弹在t=0时刻会爆炸，此时手上拿着炸弹的人会从这个世界上消失。为了增加游戏乐趣，他们约定每个人拿到炸弹后可以选择将炸弹的时间调快d秒(d ∈ [a,b])，或者不调。每次交换炸弹会消耗1秒（假设调节炸弹时间不需要消耗时间）。 问题来了，如果双方都足够聪明，谁会活下去呢？ 输入描述第一行有三个整数t,a,b，分别表示炸弹初始时刻的倒计时，可调节时间的范围。(0 ≤ t ≤ 10^5,1 ≤ a ≤ b ≤ 10) 输出描述若Alice存活则输出”Alice”，若Bob存活则输出”Bob”。 示例输入16 3 4 输出1Alice HintAlice只需要将炸弹调快3秒后再给Bob，Bob就会拿到一个2秒后爆炸的炸弹。 题解题目大意友好的中文题面 思路所以我们可以假定一个状态state[t]表示炸弹时间为t的存活状态, state[t]==1表示Alice在t时刻存活,Bob死亡, state[t]==0表示在t时刻Alice死亡, Bob存活. 然后每次可以调控[a,b]的时间,同时传递炸弹需要1秒, 所以,我们的状态可以这样转移: 当state[t-(b+1)]...state[t-(a+1)]存在一个state[x]==0时 state[t] = 1 或者 当 state[t-1]==0时 state[t] = 1 可以理解为: 如果时间为炸弹[t-1]或者[t-(b+1)]~[t-(a+1)]的游戏的结果都是最优解了,而现在炸弹的时间增加了,所以如果在过去的一段区间出现Alice死亡的结局,那么现在就可以翻转这个结局了. 代码1234567891011121314151617181920#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e5+500;bool living[maxn]; // living[t]==true表示t时刻Alice活,Bob死 int main() &#123; int i, j, t, a, b; scanf("%d%d%d", &amp;t, &amp;a, &amp;b); for (i=1; i&lt;=t; ++i) &#123; if (!living[i-1]) living[i] = true; // 表明上一次游戏的最优解Alice死,Bob活,状态转移,当前游戏的Alice活,Bod死 for (j=i-b-1; j&lt;=i-a-1; ++j) &#123; // 因为传递炸弹要用1秒 所以还要减一 if (j&gt;=0 &amp;&amp; !living[j]) &#123; // 表明上一次游戏的最优解有Alice死,Bob活,状态转移,当前游戏的Alice活,Bod死 living[i] = true; break; &#125; &#125; &#125; printf("%s\n", living[t] ? "Alice" : "Bob" ); return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>记忆化搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nowcoder190 G-CSL分苹果（01背包）]]></title>
    <url>%2F2018%2F09%2F17%2Fnowcoder190%20G-CSL%E5%88%86%E8%8B%B9%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[描述传送门：CSL分苹果 CSL手上有n个苹果，第i个苹果的质量是wi，现在他想把这些苹果分给他的好朋友wavator和tokitsukaze。但是CSL为了不让他们打架，根据质量决定尽量地均分成两堆分给他们。现在CSL想知道到底给每个人分多少质量的苹果。 注意：苹果不能劈开来，并且如果不能正好均分，tokitsukaze小姐姐会拿到重的那一堆。 输入描述第一行输入一个整数n(2 ≤ n ≤ 100)，第二行n个整数，表示每个苹果的质量wi(1 ≤ wi≤ 100)。 输出描述输出两个整数，分别表示wavator和tokitsukaze得到的苹果的质量。 示例输入1232 2 2 输出12 4 题解题目大意又是友好的中文题面 思路一道比较经典的01背包问题。因为,它要两个人的质量差尽量小,同时苹果不能分割,所以把总质量的一半作为01背包的最大容量,然后尽可能的取最大质量。把总质量除以二作为最大容量,每一个苹果的花费和收益都是它的重量,然后就是一个裸的01背包。 代码123456789101112131415161718192021222324#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 105; int main()&#123; int n; int a[maxn]; int dp[maxn * maxn]; cin &gt;&gt; n; int sum = 0; for(int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; a[i]; sum += a[i]; &#125; memset(dp,0,sizeof(dp)); for(int i = 1; i &lt;= n; i++)&#123; for(int j = sum / 2; j &gt;= a[i]; j--)&#123; dp[j] = max(dp[j], dp[j - a[i]] + a[i]); &#125; &#125; cout &lt;&lt; dp[sum / 2] &lt;&lt; " " &lt;&lt; sum - dp[sum / 2] &lt;&lt; endl; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>01背包</tag>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nowcoder190 C 谁是神射手（概率计算）]]></title>
    <url>%2F2018%2F09%2F17%2Fnowcoder190%20C-%E8%B0%81%E6%98%AF%E7%A5%9E%E5%B0%84%E6%89%8B%2F</url>
    <content type="text"><![CDATA[描述传送门：谁是神射手 有一天，MWH突然来了兴致，想和CSL比比谁枪法好。于是他们找来了一个瓶子，比比看谁先打中这个瓶子。 给定MWH的命中率和CSL的命中率。 两人轮流射击，MWH先手，问谁获胜的概率大？ 输入描述输入两个整数a和b，表示MWH和CSL的命中率。 输出描述若MWH获胜的概率大，则输出”MWH”。 若CSL获胜的概率大，则输出”CSL”，否则输出”equal”。 示例输入12100 1000 100 输出12MWHCSL 题解题目大意中文题面 思路先手获胜的概率是：先手和后手均失败了n 次后先手成功。即 $ a\sum ^{\infty }_{i=0}\left( 1-a\right) ^{i}\left( 1-b\right) ^{i}=\dfrac {a}{1-\left( 1-a\right) \left( 1-b\right) } $ 同理，后手获胜的概率为 $ a\sum ^{\infty }_{i=0}\left( 1-a\right) ^{i+1}\left( 1-b\right) ^{i}=\dfrac {b\left( 1-a\right) }{1-\left( 1-a\right) \left( 1-b\right) } $ 代码1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std; int main()&#123; double a, b; cin &gt;&gt; a &gt;&gt; b; if(a &gt; (100.0 - a) / 100.0 * b)&#123; cout &lt;&lt; "MWH" &lt;&lt; endl; &#125; else if(a &lt; (100.0 - a) / 100.0 * b)&#123; cout &lt;&lt; "CSL" &lt;&lt; endl; &#125; else&#123; cout &lt;&lt; "equal" &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>概率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces-1013c Photo of The Sky(集合 好题)]]></title>
    <url>%2F2018%2F09%2F17%2Fcf-1013c%20Photo%20of%20The%20Sky%2F</url>
    <content type="text"><![CDATA[描述传送门：Photo of The Sky Pavel made a photo of his favourite stars in the sky. His camera takes a photo of all points of the sky that belong to some rectangle with sides parallel to the coordinate axes. Strictly speaking, it makes a photo of all points with coordinates (x,y), such that x1≤x≤x2 and y1≤y≤y2, where (x1,y1) and (x2,y2) are coordinates of the left bottom and the right top corners of the rectangle being photographed. The area of this rectangle can be zero. After taking the photo, Pavel wrote down coordinates of n of his favourite stars which appeared in the photo. These points are not necessarily distinct, there can be multiple stars in the same point of the sky. Pavel has lost his camera recently and wants to buy a similar one. Specifically, he wants to know the dimensions of the photo he took earlier. Unfortunately, the photo is also lost. His notes are also of not much help; numbers are written in random order all over his notepad, so it’s impossible to tell which numbers specify coordinates of which points. Pavel asked you to help him to determine what are the possible dimensions of the photo according to his notes. As there are multiple possible answers, find the dimensions with the minimal possible area of the rectangle. 输入描述The first line of the input contains an only integer n (1≤n≤100000), the number of points in Pavel’s records. The second line contains 2⋅n integers a1, a2, …, a2⋅n (1≤ai≤109), coordinates, written by Pavel in some order. 输出描述Print the only integer, the minimal area of the rectangle which could have contained all points from Pavel’s records. 示例输入123444 1 3 2 3 2 1 335 8 5 5 7 5 输出1210 题解题目大意给你2n个数，任意组合得到n个坐标点，求最小矩形面积能够框住这n个点。 思路我们先将这2n个数排序得到a1,a2…a2n，然后考虑一下问题的转化：我们应该如何计算矩形的面积？ 因为矩形是要求把这n个点框住的，所以稍微想一下不难得到：S=(max(x)−min(x))∗(max(y)−min(y))于是我们将原问题这样转化： 给你2n个数，把这2n个数放在两个集合当中，每个集合的元素个数为n，设这两个集合分别为X,Y， 求min((Xmax−Xmin)∗(Ymax−Ymin)) 接下来我们来讨论，如何分放集合。 考虑如果最大数a2n与最小数a1如果在同一个集合X，那么现在我们要求min(Ymax−Ymin)。 考虑一下怎样的情况才会有min(Ymax−Ymin)的情况出现。假设Ymin在a中为ai，那么Ymax在a中一定为ai+n−1，为什么呢？ 如果Ymax在ai+1−&gt;ai+n−2之间，那么Y集合里面的元素个数就没有要求的n个了，不满足。 如果Ymax在ai+n−&gt;a2n−1之间，那么显然可以在满足元素个数为n的情况下使Ymax最小。 所以在最大数a2n与最小数a1如果在同一个集合X时，答案的值为： Ans=min(a[2n]−a[1])∗(a[i+n−1]−a[i])2≤i≤n 那么还有一种情况就是最大数a2n与最小数a1不在同一个集合当中，与上面类似的讨论不难得到最后的结果唯一： Ans=(a[2n]−a[n+1])∗(a[n]−a[1]) 所以我们最后的结果在上面两者之间取最小即可。 简单方法就排序后,选其中连续的n个数作为x,剩下的按序作为y, 然后用xmax-xmin乘ymax-ymin 取最小解即可 代码12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;bitset&gt;#include &lt;stack&gt;#include &lt;cmath&gt;#include &lt;deque&gt;#include &lt;queue&gt;#include &lt;list&gt;#include &lt;set&gt;#include &lt;map&gt;#define mem(a, b) memset(a, b, sizeof(a))typedef long long ll;const double PI = acos(-1);const int INF = 0x3f3f3f3f;const int MAXN = 2*1e5 +5;using namespace std;int n;ll a[MAXN];int main()&#123; cin &gt;&gt; n; for(int i = 0; i &lt; n+n; i++)&#123; cin &gt;&gt; a[i]; &#125; sort(a, a+n+n); if(n &lt;= 1)&#123; cout &lt;&lt; "0" &lt;&lt; endl; &#125; else&#123; ll ans = a[n-1]-a[0]; ans *= a[n+n-1]-a[n]; ll l = a[n+n-1]-a[0]; for(int i = 1; i &lt;= n; i++)&#123; ans = min(ans, l*(a[i+n-1]-a[i])); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>构造</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces-1015c Songs Compression(优先队列)]]></title>
    <url>%2F2018%2F09%2F17%2Fcf-1015c%20Songs%20Compression%2F</url>
    <content type="text"><![CDATA[描述传送门：Songs Compression Ivan has n songs on his phone. The size of the i-th song is ai bytes. Ivan also has a flash drive which can hold at most m bytes in total. Initially, his flash drive is empty. Ivan wants to copy all n songs to the flash drive. He can compress the songs. If he compresses the i-th song, the size of the i-th song reduces from ai to bi bytes (bi&lt;ai). Ivan can compress any subset of the songs (possibly empty) and copy all the songs to his flash drive if the sum of their sizes is at most m. He can compress any subset of the songs (not necessarily contiguous). Ivan wants to find the minimum number of songs he needs to compress in such a way that all his songs fit on the drive (i.e. the sum of their sizes is less than or equal to m). If it is impossible to copy all the songs (even if Ivan compresses all the songs), print “-1”. Otherwise print the minimum number of songs Ivan needs to compress. 输入描述The first line of the input contains two integers n and m (1≤n≤105,1≤m≤109) — the number of the songs on Ivan’s phone and the capacity of Ivan’s flash drive. The next n lines contain two integers each: the i-th line contains two integers ai and bi (1≤ai,bi≤109, ai&gt;bi) — the initial size of the i-th song and the size of the i-th song after compression. 输出描述If it is impossible to compress a subset of the songs in such a way that all songs fit on the flash drive, print “-1”. Otherwise print the minimum number of the songs to compress. 示例输入123456789104 2110 87 43 15 44 1610 87 43 15 4 输出122-1 HintIn the first example Ivan can compress the first and the third songs so after these moves the sum of sizes will be equal to 8+7+1+5=21≤21. Also Ivan can compress the first and the second songs, then the sum of sizes will be equal 8+4+3+5=20≤21. Note that compressing any single song is not sufficient to copy all the songs on the flash drive (for example, after compressing the second song the sum of sizes will be equal to 10+4+3+5=22&gt;21). In the second example even if Ivan compresses all the songs the sum of sizes will be equal 8+4+1+4=17&gt;16. 题解题目大意给出 n 首歌曲压缩前与压缩后的大小，以及优盘的空间 m，求最少压缩几首歌能将所有歌放入优盘，如果放不进去输出 -1 思路贪心，先判断所有歌曲压缩后的大小是否小于m，如果大于，则说明放不进去，输出 -1，然后再将所有歌曲按照可压缩空间的大小排序，不断计算压缩值统计压缩数量即可。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;bitset&gt;#include &lt;stack&gt;#include &lt;cmath&gt;#include &lt;deque&gt;#include &lt;queue&gt;#include &lt;list&gt;#include &lt;set&gt;#include &lt;map&gt;#define mem(a, b) memset(a, b, sizeof(a))typedef long long ll;const double PI = acos(-1);const int INF = 0x3f3f3f3f;const int MAXN = 105;using namespace std;ll sum;int main()&#123; int n, m; while(cin &gt;&gt; n &gt;&gt; m)&#123; priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; que; sum = 0; while(n--)&#123; int a, b; cin &gt;&gt; a &gt;&gt; b; sum += a; que.push(b-a); &#125; int ans = 0; while(!que.empty())&#123; if(sum &lt;= m)&#123; break; &#125; else&#123; ans++; sum += que.top(); que.pop(); &#125; &#125; if(sum &lt;= m)&#123; cout &lt;&lt; ans &lt;&lt; endl; &#125; else&#123; cout &lt;&lt; "-1" &lt;&lt; endl; &#125; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>构造</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>优先队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces-1017c The Phone Number(构造+思维+数学)]]></title>
    <url>%2F2018%2F09%2F17%2Fcf-1017c%20The%20Phone%20Number%2F</url>
    <content type="text"><![CDATA[描述传送门：The Phone Number Mrs. Smith is trying to contact her husband, John Smith, but she forgot the secret phone number! The only thing Mrs. Smith remembered was that any permutation of n can be a secret phone number. Only those permutations that minimize secret value might be the phone of her husband. The sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once. The secret value of a phone number is defined as the sum of the length of the longest increasing subsequence (LIS) and length of the longest decreasing subsequence (LDS). A subsequence ai1,ai2,…,aik where 1≤i1&lt;i2&lt;…&lt;ik≤n is called increasing if ai1&lt;ai2&lt;ai3&lt;…&lt;aik. If ai1&gt;ai2&gt;ai3&gt;…&gt;aik, a subsequence is called decreasing. An increasing/decreasing subsequence is called longest if it has maximum length among all increasing/decreasing subsequences. For example, if there is a permutation [6,4,1,7,2,3,5], LIS of this permutation will be [1,2,3,5], so the length of LIS is equal to 4. LDS can be [6,4,1], [6,4,2], or [6,4,3], so the length of LDS is 3. Note, the lengths of LIS and LDS can be different. So please help Mrs. Smith to find a permutation that gives a minimum sum of lengths of LIS and LDS. 输入描述The only line contains one integer n (1≤n≤105) — the length of permutation that you need to build. 输出描述Print a permutation that gives a minimum sum of lengths of LIS and LDS. If there are multiple answers, print any. 示例输入12342 输出1233 4 1 22 1 HintIn the first sample, you can build a permutation [3,4,1,2]. LIS is [3,4] (or [1,2]), so the length of LIS is equal to 2. LDS can be ony of [3,1], [4,2], [3,2], or [4,1]. The length of LDS is also equal to 2. The sum is equal to 4. Note that [3,4,1,2] is not the only permutation that is valid. In the second sample, you can build a permutation [2,1]. LIS is [1] (or [2]), so the length of LIS is equal to 1. LDS is [2,1], so the length of LDS is equal to 2. The sum is equal to 3. Note that permutation [1,2] is also valid. 题解题目大意给定一个数n，构造一个1-n的序列使得其中的最长上升子序列和最长下降子序列的和最短 思路将 n 分成 m 块， 其中每一块中的数字是递增的，各个块之间是递减的，则最长上升子序列的长度和最长下降子序列的长度和最小，为m+(n/m)，由基本不等式可知，当 m 为 √n 时 m+(n/m) 的值最小。 代码123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;bitset&gt;#include &lt;stack&gt;#include &lt;cmath&gt;#include &lt;deque&gt;#include &lt;queue&gt;#include &lt;list&gt;#include &lt;set&gt;#include &lt;map&gt;#define mem(a, b) memset(a, b, sizeof(a))typedef long long ll;const double PI = acos(-1);const int INF = 0x3f3f3f3f;const int MAXN = 1e3 +5;using namespace std;int main()&#123; int n; while(cin &gt;&gt; n)&#123; int siz = ceil(sqrt(n)); int tot = 0; for(int i = 1; i &lt;= siz; i++)&#123; for(int j = 1; j &lt;= siz; j++)&#123; int prt = n-i*siz+j; if(prt &gt; 0)&#123; cout &lt;&lt; prt &lt;&lt; " "; &#125; tot++; &#125; &#125; for(int i = 1; i &lt;= n-tot; i++)&#123; cout &lt;&lt; i &lt;&lt; " "; &#125; cout &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>构造</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-3009 Curling 2.0（DFS）]]></title>
    <url>%2F2018%2F08%2F13%2FPOJ-3009%20Curling%202.0%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-3009 Curling 2.0 On Planet MM-21, after their Olympic games this year, curling is getting popular. But the rules are somewhat different from ours. The game is played on an ice game board on which a square mesh is marked. They use only a single stone. The purpose of the game is to lead the stone from the start to the goal with the minimum number of moves. Fig. 1 shows an example of a game board. Some squares may be occupied with blocks. There are two special squares namely the start and the goal, which are not occupied with blocks. (These two squares are distinct.) Once the stone begins to move, it will proceed until it hits a block. In order to bring the stone to the goal, you may have to stop the stone by hitting it against a block, and throw again. Fig. 1: Example of board (S: start, G: goal) The movement of the stone obeys the following rules: At the beginning, the stone stands still at the start square.The movements of the stone are restricted to x and y directions. Diagonal moves are prohibited.When the stone stands still, you can make it moving by throwing it. You may throw it to any direction unless it is blocked immediately(Fig. 2(a)).Once thrown, the stone keeps moving to the same direction until one of the following occurs:The stone hits a block (Fig. 2(b), (c)).The stone stops at the square next to the block it hit.The block disappears.The stone gets out of the board.The game ends in failure.The stone reaches the goal square.The stone stops there and the game ends in success.You cannot throw the stone more than 10 times in a game. If the stone does not reach the goal in 10 moves, the game ends in failure. Fig. 2: Stone movements Under the rules, we would like to know whether the stone at the start can reach the goal and, if yes, the minimum number of moves required. With the initial configuration shown in Fig. 1, 4 moves are required to bring the stone from the start to the goal. The route is shown in Fig. 3(a). Notice when the stone reaches the goal, the board configuration has changed as in Fig. 3(b). Fig. 3: The solution for Fig. D-1 and the final board configuration 输入描述The input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. The number of datasets never exceeds 100. Each dataset is formatted as follows. the width(=w) and the height(=h) of the boardFirst row of the board…h-th row of the board The width and the height of the board satisfy: 2 &lt;= w &lt;= 20, 1 &lt;= h &lt;= 20. Each line consists of w decimal numbers delimited by a space. The number describes the status of the corresponding square. 0 vacant square1 block2 start position3 goal positionThe dataset for Fig. D-1 is as follows: 6 61 0 0 2 1 01 1 0 0 0 00 0 0 0 0 30 0 0 0 0 01 0 0 0 0 10 1 1 1 1 1 输出描述For each dataset, print a line having a decimal integer indicating the minimum number of moves along a route from the start to the goal. If there are no such routes, print -1 instead. Each line should not have any character other than this number. 示例输入1234567891011121314151617182 13 26 61 0 0 2 1 01 1 0 0 0 00 0 0 0 0 30 0 0 0 0 01 0 0 0 0 10 1 1 1 1 16 11 1 2 1 1 36 11 0 2 1 1 312 12 0 1 1 1 1 1 1 1 1 1 313 12 0 1 1 1 1 1 1 1 1 1 1 30 0 输出12345614-1410-1 题解题目大意每一次碰到障碍则在障碍的旁边停下来，并且障碍被击碎。此时可以重新值掷一次冰球。当掷球次数超过 10 次则输出 -1。 思路最短路的变型，直接暴力怼就好。BFS也可以做，但这题涉及到地图的变化，更适合用DFS回溯。注意减枝。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;set&gt;#include &lt;map&gt;#include &lt;vector&gt;#include &lt;queue&gt;const int MAXN = 25, INF = 0x3f3f3f3f;using namespace std;int dx[] = &#123;0, 0, 1, -1&#125;;int dy[] = &#123;1, -1, 0, 0&#125;;int w, h, ans;int mp[MAXN][MAXN];struct node&#123; int x, y;&#125;Start, End, now, nex;void dfs(int x, int y, int step)&#123; if(step &gt;= 10)&#123; return; &#125; for(int i = 0; i &lt; 4; i++)&#123; int xx = x, yy = y; if(mp[xx+dx[i]][yy+dy[i]] == 1)&#123; continue; &#125; while(mp[xx+dx[i]][yy+dy[i]] == 0)&#123; xx += dx[i]; yy += dy[i]; &#125; if(mp[xx+dx[i]][yy+dy[i]] == 3)&#123; ans = min(ans, step+1); continue; &#125; if(mp[xx+dx[i]][yy+dy[i]] == 1)&#123; mp[xx+dx[i]][yy+dy[i]] = 0; dfs(xx, yy, step+1); mp[xx+dx[i]][yy+dy[i]] = 1; &#125; &#125;&#125;int main()&#123; while(cin &gt;&gt; w &gt;&gt; h &amp;&amp; w &amp;&amp; h)&#123; memset(mp, -1, sizeof(mp)); for(int i = 1; i &lt;= h; i++)&#123; for(int j = 1; j &lt;= w; j++)&#123; cin &gt;&gt; mp[i][j]; if(mp[i][j] == 2)&#123; Start.x = i; Start.y = j; mp[i][j] = 0; &#125; &#125; &#125; ans = INF; dfs(Start.x, Start.y, 0); if(ans == INF) cout &lt;&lt; "-1" &lt;&lt; endl; else cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>简单搜索</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2718 Smallest Difference（STL全排列 + 输入流魔改）]]></title>
    <url>%2F2018%2F08%2F11%2FPOJ-2718%20Smallest%20Difference%2F</url>
    <content type="text"><![CDATA[描述传送门：Smallest Difference Given a number of distinct decimal digits, you can form one integer by choosing a non-empty subset of these digits and writing them in some order. The remaining digits can be written down in some order to form a second integer. Unless the resulting integer is 0, the integer may not start with the digit 0. For example, if you are given the digits 0, 1, 2, 4, 6 and 7, you can write the pair of integers 10 and 2467. Of course, there are many ways to form such pairs of integers: 210 and 764, 204 and 176, etc. The absolute value of the difference between the integers in the last pair is 28, and it turns out that no other pair formed by the rules above can achieve a smaller difference. 输入描述The first line of input contains the number of cases to follow. For each case, there is one line of input containing at least two but no more than 10 decimal digits. (The decimal digits are 0, 1, …, 9.) No digit appears more than once in one line of the input. The digits will appear in increasing order, separated by exactly one blank space. 输出描述For each test case, write on a single line the smallest absolute difference of two integers that can be written from the given digits as described by the rules above. 示例输入1210 1 2 4 6 7 输出128 题解题目大意给定若干位十进制数，你可以通过选择一个非空子集并以某种顺序构建一个数。剩余元素可以用相同规则构建第二个数。除非构造的数恰好为0，否则不能以0打头。 思路若总数字数是偶数，组出来的两个数字的长度必相等，若是奇数，长度必差一对所有数字排列，求 data[:N//2], data[N//2:] 的差及可 AC注意须排除有前导 0 的情况。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;sstream&gt;using namespace std;int solve(vector&lt;int&gt;&amp; data) &#123; int N = data.size(); int len = N / 2; int min_diff = 1000000000; do &#123; // data[:len], data[len:] // prefix 0 if (len != 1 &amp;&amp; data[0] == 0) continue; if (N - len != 1 &amp;&amp; data[len] == 0) continue; int first = 0; for (int i = 0; i &lt; len; i++) first = first * 10 + data[i]; int second = 0; for (int i = len; i &lt; N; i++) second = second * 10 + data[i]; if (abs(first - second) &lt; min_diff) min_diff = abs(first - second); &#125; while (next_permutation(data.begin(), data.end())); return min_diff;&#125;int main() &#123; ios::sync_with_stdio(false); int T; cin &gt;&gt; T; string temp; getline(cin, temp); // eat the endl while (T--) &#123; string line; getline(cin, line); istringstream iss(line); vector&lt;int&gt; data; int inp; while (iss &gt;&gt; inp) &#123; data.push_back(inp); &#125; cout &lt;&lt; solve(data) &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>C++ &amp;&amp; STL库</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Aizu-0121 Seven Puzzle（BFS+STL+打表）]]></title>
    <url>%2F2018%2F08%2F10%2FAizu-0121%20Seven%20Puzzle%2F</url>
    <content type="text"><![CDATA[描述传送门：Aizu-0121 Seven Puzzle 7 パズルは 8 つの正方形のカードとこれらのカードがぴたりと収まる枠で構成されています。それぞれのカードには、互いに区別できるように 0, 1, 2, …, 7 と番号がつけられています。枠には、縦に 2 個、横に 4 個のカードを並べることができます。7 パズルを始めるときには、まず枠にすべてのカードを入れます。枠のなかで 0 のカードだけは、上下左右に隣接するカードと位置を交換することができます。たとえば、枠の状態が図(a) のときに、0 のカードの右に隣接した、7 のカードと位置を交換すれば、図(b) の状態になります。あるいは、図(a) の状態から 0 のカードの下に隣接した 2 のカードと位置を交換すれば図(c) の状態になります。図(a) の状態で 0 のカードと上下左右に隣接するカードは 7 と 2 のカードだけなので、これ以外の位置の入れ替えは許されません。ゲームの目的は、カードをきれいに整列して図(d) の状態にすることです。最初の状態を入力とし、カードをきれいに整列するまでに、必要な最小手数を出力するプログラムを作成してください。ただし、入力されたカードの状態からは図(d) の状態に移ることは可能であるとします。入力データは、1 行に 8 つの数字が空白区切りで与えられます。これらは、最初の状態のカードの並びを表します。例えば、図(a) の数字表現は0 7 3 4 2 5 1 6 に、図(c) は 2 7 3 4 0 5 1 6 となります。 (a) 0 7 3 4 2 5 1 6 の場合(b) 7 0 3 4 2 5 1 6 の場合 (c) 2 7 3 4 0 5 1 6 の場合 (d) 0 1 2 3 4 5 6 7 (最終状態) 输入描述上記形式で複数のパズルが与えられます。入力の最後まで処理してください。 与えられるパズルの数は 1,000 以下です。 输出描述各パズルについて、最終状態へ移行する最小手数を１行に出力してください。 示例输入1230 1 2 3 4 5 6 71 0 2 3 4 5 6 77 6 5 4 3 2 1 0 输出1230128 题解题目大意只有牌0才能和四周的牌交换，给定一个状态，求到图d状态最少需要多少步 思路bfs反向处理打表，用map存入每个状态。 代码123456789101112131415161718192021222324252627282930313233343536373839#include &lt;bits/stdc++.h&gt;using namespace std;typedef pair&lt;string, int&gt; P;map&lt;string, int&gt; mp;string str;int op[] = &#123;-1, 1, 4, -4&#125;;void bfs()&#123; queue&lt;P&gt; que; que.push(P("01234567", 0)); mp["01234567"] = 0; while(!que.empty())&#123; P p = que.front(); que.pop(); string s = p.first; int cur = p.second; for(int i = 0; i &lt; 4; i++)&#123; int nex = cur + op[i]; string tmp = s; swap(tmp[cur], tmp[nex]); map&lt;string, int&gt;::iterator it = mp.find(tmp); if(0 &lt;= nex &amp;&amp; nex &lt; 8 &amp;&amp; !(cur == 3 &amp;&amp; nex == 4) &amp;&amp; !(cur == 4 &amp;&amp; nex == 3) &amp;&amp; it == mp.end())&#123; que.push(P(tmp, nex)); mp[tmp] = mp[s] + 1; &#125; &#125; &#125;&#125;int main()&#123; bfs(); while(getline(cin, str))&#123; str.erase(remove(str.begin(), str.end(), ' '), str.end()); cout&lt;&lt;mp[str]&lt;&lt;endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>简单搜索</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Aizu-055 Cheese （BFS分段处理）]]></title>
    <url>%2F2018%2F08%2F09%2FAizu-055%20Cheese%2F</url>
    <content type="text"><![CDATA[描述传送门：Aizu-055 Cheese 今年も JOI 町のチーズ工場がチーズの生産を始め，ねずみが巣から顔を出した．JOI 町は東西南北に区画整理されていて，各区画は巣，チーズ工場，障害物，空き地のいずれかである．ねずみは巣から出発して全てのチーズ工場を訪れチーズを 1 個ずつ食べる．この町には，N 個のチーズ工場があり，どの工場も１種類のチーズだけを生産している．チーズの硬さは工場によって異なっており，硬さ 1 から N までのチーズを生産するチーズ工場がちょうど 1 つずつある．ねずみの最初の体力は 1 であり，チーズを 1 個食べるごとに体力が 1 増える．ただし，ねずみは自分の体力よりも硬いチーズを食べることはできない．ねずみは，東西南北に隣り合う区画に 1 分で移動することができるが，障害物の区画には入ることができない．チーズ工場をチーズを食べずに通り過ぎることもできる．すべてのチーズを食べ終えるまでにかかる最短時間を求めるプログラムを書け．ただし，ねずみがチーズを食べるのにかかる時間は無視できる． 输入描述入力は H+1 行ある．1 行目には 3 つの整数 H，W，N (1 ≤ H ≤ 1000，1 ≤ W ≤ 1000，1 ≤ N ≤ 9) がこの順に空白で区切られて書かれている．2 行目から H+1 行目までの各行には，’S’，’1’, ‘2’, …, ‘9’，’X’，’.’ からなる W 文字の文字列が書かれており，各々が各区画の状態を表している．北から i 番目，西から j 番目の区画を (i,j) と記述することにすると (1 ≤ i ≤ H, 1 ≤ j ≤ W)，第 i+1 行目の j 番目の文字は，区画 (i,j) が巣である場合は ‘S’ となり，障害物である場合は ‘X’ となり，空き地である場合は ‘.’ となり，硬さ 1, 2, …, 9 のチーズを生産する工場である場合はそれぞれ ‘1’, ‘2’, …, ‘9’ となる．入力には巣と硬さ 1, 2, …, N のチーズを生産する工場がそれぞれ 1 つずつある．他のマスは障害物または空き地であることが保証されている．ねずみは全てのチーズを食べられることが保証されている． 输出描述すべてのチーズを食べ終えるまでにかかる最短時間（分）を表す整数を 1 行で出力せよ． 示例输入123456789101112131415161718192021223 3 1S.......14 5 2.X..1....X.XX.S.2.X.10 10 9.X...X.S.X6..5X..X1X...XXXX..XX..9X...X.8.X2X..X3X...XX.X4..XX....7X..X..X..XX..X...X.XX....X....... 输出12341291 题解题目大意在H * W的地图上有N个奶酪工厂，每个工厂分别生产硬度为1-N的奶酪。有一只老鼠准备从出发点吃遍每一个工厂的奶酪。老鼠有一个体力值，初始时为1，每吃一个工厂的奶酪体力值增加1（每个工厂只能吃一次），且老鼠只能吃硬度不大于当前体力值的奶酪。 老鼠从当前格到上下左右相邻的无障碍物的格需要时间1单位，有障碍物的格不能走。走到工厂上时即可吃到该工厂的奶酪，吃奶酪时间不计。问吃遍所有奶酪最少用时。 输入：第一行三个整数H(1 &lt;= H &lt;= 1000)、W(1 &lt;= W &lt;=1000)、N(1 &lt;= N &lt;= 9)，之后H行W列为地图， “.“为空地， ”X“为障碍物，”S“为老鼠洞， 1-N代表硬度为1-N的奶酪的工厂。输出最少用时。 思路分段处理区间最小路径，最后累加即可。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;bits/stdc++.h&gt;const int MAXN = 1e3 +5, INF = 0x3f3f3f3f;using namespace std;int dx[] = &#123;0, 0, 1, -1&#125;;int dy[] = &#123;1, -1, 0, 0&#125;;int w, h, n, vis[MAXN][MAXN];char mp[MAXN][MAXN];struct node&#123; int x, y, dis;&#125;now, nex, path[MAXN];int bfs(int m)&#123; memset(vis, 0, sizeof(vis)); vis[path[m-1].x][path[m-1].y] = 1; queue&lt;node&gt; que; nex.x = path[m-1].x; nex.y = path[m-1].y; nex.dis = 0; que.push(nex); char ed = '0' + m; while(!que.empty())&#123; now = que.front(); que.pop(); for(int i = 0; i &lt; 4; i++)&#123; int xx = now.x+dx[i], yy = now.y+dy[i]; if(xx &gt;= 0 &amp;&amp; yy &gt;= 0 &amp;&amp; xx &lt; h &amp;&amp; yy &lt; w &amp;&amp; !vis[xx][yy] &amp;&amp; mp[xx][yy] != 'X')&#123; vis[xx][yy] = 1; if(mp[xx][yy] == ed)&#123; return now.dis+1; &#125; else&#123; nex.x = xx; nex.y = yy; nex.dis = now.dis+1; que.push(nex); &#125; &#125; &#125; &#125;&#125;int main()&#123; cin &gt;&gt; h &gt;&gt; w &gt;&gt; n; for(int i = 0; i &lt; h; i++)&#123; for(int j = 0; j &lt; w; j++)&#123; cin &gt;&gt; mp[i][j]; if(mp[i][j] == 'S')&#123; path[0].x = i; path[0].y = j; &#125; else if(mp[i][j] == '.' || mp[i][j] == 'X')&#123; continue; &#125; else&#123; int t = mp[i][j] - '0'; path[t].x = i; path[t].y = j; &#125; &#125; &#125; int ans = 0; for(int i = 1; i &lt;= n; i++)&#123; ans += bfs(i); &#125; cout &lt;&lt; ans &lt;&lt; endl;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>简单搜索</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-3617 Best Cow Line （贪心）]]></title>
    <url>%2F2018%2F08%2F08%2FPOJ-3617%20Best%20Cow%20Line%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-3617 Best Cow Line FJ is about to take his N (1 ≤ N ≤ 2,000) cows to the annual”Farmer of the Year” competition. In this contest every farmer arranges his cows in a line and herds them past the judges. The contest organizers adopted a new registration scheme this year: simply register the initial letter of every cow in the order they will appear (i.e., If FJ takes Bessie, Sylvia, and Dora in that order he just registers BSD). After the registration phase ends, every group is judged in increasing lexicographic order according to the string of the initials of the cows’ names. FJ is very busy this year and has to hurry back to his farm, so he wants to be judged as early as possible. He decides to rearrange his cows, who have already lined up, before registering them. FJ marks a location for a new line of the competing cows. He then proceeds to marshal the cows from the old line to the new one by repeatedly sending either the first or last cow in the (remainder of the) original line to the end of the new line. When he’s finished, FJ takes his cows for registration in this new order. Given the initial order of his cows, determine the least lexicographic string of initials he can make this way. 输入描述 Line 1: A single integer: N Lines 2..N+1: Line i+1 contains a single initial (‘A’..’Z’) of the cow in the ith position in the original line 输出描述The least lexicographic string he can make. Every line (except perhaps the last one) contains the initials of 80 cows (‘A’..’Z’) in the new line. 示例输入12345676ACDBCB 输出1ABCBCD 题解题目大意给定一个长度为N的字符串S，T是一个空串，每次从头部或尾部删除一个字符加到T的尾部，构造字典序最小的字符串T。 思路不断取开头或末尾中较小的一个字符到T中，注意两边相等的情况，还有坑点是输出格式是80行换行。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;vector&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;cstdlib&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;queue&gt;const int MAXN = 2005;using namespace std;char s[MAXN];int main()&#123; int n; while(cin &gt;&gt; n)&#123; for(int i = 0; i &lt; n; i++)&#123; cin &gt;&gt; s[i]; &#125; int a = 0, b = n-1, cnt = 0; while(a &lt;= b)&#123; bool left = false; for(int i = 0; a+i &lt;= b; i++)&#123; if(s[a+i] &lt; s[b-i])&#123; left = true; break; &#125; else if(s[a+i] &gt; s[b-i])&#123; left = false; break; &#125; &#125; if(left) putchar(s[a++]); else putchar(s[b--]); cnt++; if(cnt == 80)&#123; cnt=0; cout &lt;&lt; endl; &#125; &#125; if(cnt) cout &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>基础技巧</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-3069 Saruman's Army （贪心）]]></title>
    <url>%2F2018%2F08%2F08%2FPOJ-3069%20Saruman's%20Army%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-3069 Saruman's Army Saruman the White must lead his army along a straight path from Isengard to Helm’s Deep. To keep track of his forces, Saruman distributes seeing stones, known as palantirs, among the troops. Each palantir has a maximum effective range of R units, and must be carried by some troop in the army (i.e., palantirs are not allowed to “free float” in mid-air). Help Saruman take control of Middle Earth by determining the minimum number of palantirs needed for Saruman to ensure that each of his minions is within R units of some palantir. 输入描述The input test file will contain multiple cases. Each test case begins with a single line containing an integer R, the maximum effective range of all palantirs (where 0 ≤ R ≤ 1000), and an integer n, the number of troops in Saruman’s army (where 1 ≤ n ≤ 1000). The next line contains n integers, indicating the positions x1, …, xn of each troop (where 0 ≤ xi ≤ 1000). The end-of-file is marked by a test case with R = n = −1. 输出描述For each test case, print a single integer indicating the minimum number of palantirs needed. 示例输入123450 310 20 2010 770 30 1 7 15 20 50-1 -1 输出1224 HintIn the first test case, Saruman may place a palantir at positions 10 and 20. Here, note that a single palantir with range 0 can cover both of the troops at position 20. In the second test case, Saruman can place palantirs at position 7 (covering troops at 1, 7, and 15), position 20 (covering positions 20 and 30), position 50, and position 70. Here, note that palantirs must be distributed among troops and are not allowed to “free float.” Thus, Saruman cannot place a palantir at position 60 to cover the troops at positions 50 and 70. 题解题目大意从n个点中选择若干个进行标记，对于每一个点，其距离为R的区域以内必须有带标记的点，问最少有多少点被标记。 思路标记从最左边的点开始，距离为R以内的最远的点。对于添加了符号的点右侧，相距超过R的下一个点，采用同样的方法找到其右侧R距离以内最远的点添加标记。 代码12345678910111213141516171819202122232425262728293031323334#include &lt;vector&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;cstdlib&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;queue&gt;const int MAXN = 1e3 +5;using namespace std;int a[MAXN];int main()&#123; int r, n; while(cin &gt;&gt; r &gt;&gt; n)&#123; if(r == -1 &amp;&amp; n == -1) break; for(int i = 0; i &lt; n; i++)&#123; cin &gt;&gt; a[i]; &#125; sort(a, a+n); int i = 0, ans = 0; while(i &lt; n)&#123; int s = a[i++]; while(i &lt; n &amp;&amp; a[i] &lt;= s + r) i++; int p = a[i - 1]; while(i &lt; n &amp;&amp; a[i] &lt;= p + r) i++; ans++; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>基础技巧</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nowcoder163 A-Fruit Ninja（计算几何+随机算法）]]></title>
    <url>%2F2018%2F08%2F07%2Fnowcoder163%20A-Fruit-Ninja%2F</url>
    <content type="text"><![CDATA[描述传送门：A-Fruit Ninja Fruit Ninja is a juicy action game enjoyed by millions of players around the world, with squishy,splat and satisfying fruit carnage! Become the ultimate bringer of sweet, tasty destruction with every slash.Fruit Ninja is a very popular game on cell phones where people can enjoy cutting the fruit by touching the screen.In this problem, the screen is rectangular, and all the fruits can be considered as a point. A touch is a straight line cuttingthought the whole screen, all the fruits in the line will be cut.A touch is EXCELLENT if $ \dfrac {M}{N} $ ≥ x, (N is total number of fruits in the screen, M is the number of fruits that cut by the touch, x is a real number.)Now you are given N fruits position in the screen, you want to know if exist a EXCELLENT touch. 输入描述The first line of the input is T(1≤ T ≤ 100), which stands for the number of test cases you need to solve.The first line of each case contains an integer N (1 ≤ N ≤ 104) and a real number x (0 &lt; x &lt; 1), as mentioned above.The real number will have only 1 digit after the decimal point.The next N lines, each lines contains two integers xi and yi (-109 ≤ xi,yi ≤ 109), denotes the coordinates of a fruit. 输出描述For each test case, output “Yes” if there are at least one EXCELLENT touch. Otherwise, output “No”. 示例输入1234567891011121325 0.6-1 -120 11 205 59 95 0.5-1 -120 11 202 59 9 输出12YesNo 题解题目大意给你n个点，再给你一个p（数据保证0 &lt; p &lt; 1，且p只有1位小数），问是否满足图中有n*p个点在一条直线上 思路随机两个点，然后再看其它所有点 是否在这条直线上即可，随机1000+AC没问题 代码1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;using namespace std;typedef struct&#123; int x; int y;&#125;Point;Point s[20005];int Xc(int x1, int y1, int x2, int y2)&#123; return x1*y2-x2*y1;&#125;int main()&#123; double x; int n, T, i, cnt, a, b, ans; scanf("%d", &amp;T); while(T--)&#123; scanf("%d%lf", &amp;n, &amp;x); for(i=1;i&lt;=n;i++) scanf("%d%d", &amp;s[i].x, &amp;s[i].y); cnt = 1111; while(cnt--)&#123; ans = 0; a = rand()%n, b = rand()%n; if(a==b) continue; for(i=1;i&lt;=n;i++)&#123; if(Xc(s[i].x-s[a].x, s[i].y-s[a].y, s[b].x-s[a].x, s[b].y-s[a].y)==0) ans++; &#125; if(10*ans &gt;= 10*x*n)&#123; printf("Yes\n"); break; &#125; &#125; if(cnt==-1) printf("No\n"); &#125;&#125;]]></content>
      <categories>
        <category>比赛</category>
        <category>计算几何</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
        <tag>随机算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nowcoder163 D-Thinking Bear magic（计算几何）]]></title>
    <url>%2F2018%2F08%2F07%2Fnowcoder163%20D-Thinking-Bear-magic%2F</url>
    <content type="text"><![CDATA[描述传送门：D-Thinking Bear magic In order to become a magical girl, Thinking-Bear are learning magic circle.He first drew a regular polygon of N sides, and the length of each side is a.He want to get a regular polygon of N sides, and the polygon area is no more than L.He doesn’t want to draw a new regular polygon as it takes too much effort.So he think a good idea, connect the midpoint of each edge and get a new regular polygon of N sides.How many operations does it need to get the polygon he want? 输入描述The first line of the input is T(1≤ T ≤ 100), which stands for the number of test cases you need to solve.The first line of each case contains three space-separated integers N, a and L (3 ≤ N ≤ 10, 1 ≤ a ≤ 100, 1 ≤ L ≤ 1000). 输出描述For each test case, output a single integer. 示例输入1214 2 3 输出11 题解题目大意给出一个正多边形和多边形的每一条边的边长，然后给出一个面积，求每次在正多边形的的边取中点，然后连接各个中点，形成一个新的正多边形，问经过几次这次这样的操作后能使面积小于L。 思路计算几何，关键是操作后的面积与原面积比为 $ \cos ^{2}\left( 180^{\circ }\div n\right) $ ，坑点是double的精度问题。 扩展 内角:正n边形的内角和度数为： （n－2)×180°;正n边形的一个内角是 (n-2)×180°÷n. 外角:正n边形外角和等于n·180°－(n－2)·180°=360°,所以正n边形的一个 外角为： 360°÷n.所以正n边形的一个 内角也可以用这个公式： 180°-360°÷n. 中心角：任何一个正多边形，都可作一个 外接圆，多边形的中心就是所作外接圆的圆心，就是这条边所对的弧的圆心角，因此这个角就是360度÷边数。正多边形 中心角：360°÷n因此可证明，正n边形中， 外角= 中心角= 360°÷n 对角线：在一个正多边形中，所有的顶点可以与除了他相邻的两个顶点的其他顶点连线，就成了相邻的点）个三角形。三角形 内角和：180度，所以把边数减2乘上180度，就是这个正多边形的内角和 。 面积：设正n边形的半径为R，边长为an，中心角为αn，边心距为rn，则αn=360°÷n，an=2Rsin(180°÷n)，rn=Rcos(180°÷n)，R^2=r n^2+(an÷2)^2， 周长pn=n×an，面积Sn=pn×rn÷2。 代码12345678910111213141516171819202122#include &lt;bits/stdc++.h&gt;using namespace std;const double PI = acos(-1.0);const double eps = 1.0e-6;int main()&#123; int T; cin&gt;&gt;T; while(T--)&#123; double n,a,l; scanf("%lf %lf %lf",&amp;n,&amp;a,&amp;l); int ans=0; double R=a/(2.0*sin((180.0/n)*PI/180.0)); double S=0.5*sin((360.0/n)*PI/180.0)*n*R*R; double an=180.0*(n-2)/n; while(S &gt; l &amp;&amp; fabs(S-l) &gt; eps)&#123; S = S*cos(((180.0-an)/2.0)*PI/180.0)*cos(((180.0-an)/2.0)*PI/180.0); ans++; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>比赛</category>
        <category>计算几何</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nowcoder163 B-Matrix Multiplication （矩阵快速幂 模板）]]></title>
    <url>%2F2018%2F08%2F06%2Fnowcoder163%20B-Matrix-Multiplication%2F</url>
    <content type="text"><![CDATA[描述传送门：B-Matrix Multiplication In mathematics, matrix multiplication or matrix product is a binary operation that produces a matrix from two matrices with entries in a field, or, more generally, in a ring or even a semiring. The matrix product is designed for representing the composition of linear maps that are represented by matrices. Matrix multiplication is thus a basic tool of linear algebra, and as such has numerous applications in many areas of mathematics, as well as in applied mathematics, physics, and engineering. In more detail, if A is an n x m matrix and B is an m x p matrix, their product AB is an n x p matrix, in which the m entries across a row of A are multiplied with the m emtries down a column of B and summed to produce an entry of AB. When two linear maps are represented by matrices, then the matrix product represents the composition of the two maps.We can only multiply two matrices if their dimensions are compatible, which means the number of columns in the first matrix is the same as the number of rows in the second matrix.If A is an n x m matrix and B is an m x p matrix, the matrix product C = AB is defined to be the n x p matrix such that,for i = 1,2, …, n and j = 1,2, …, p.Your task is to design a matrix multiplication calculator to multiply two matrices anddisplay the output. If the matrices cannot be multiplied, display “ERROR”. 输入描述The first line of the input is T(1≤ T ≤ 100), which stands for the number of test cases you need to solve.For each test case, the first line contains four integers m, n, p and q (1 ≤ m,n,p,q ≤ 20). m and n represent the dimension of matrix A, while p and q represent the dimension of matrix B.The following m lines consist of the data for matrix A followed by p lines that contains the data for matrix B. (-100 ≤ aij ≤ 100, -100 ≤ bij ≤ 100). 输出描述For each test case, print the case number and the output of the matrix multiplication. 示例输入12345678910111222 3 3 21 1 11 2 32 34 56 72 3 2 31 2 31 2 32 3 42 3 4 输出12345Case 1:12 1528 34Case 2:ERROR 题解题目大意矩阵相乘 思路模板题 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;bits/stdc++.h&gt;typedef long long lint;const int MAXN = 25, INF = 0x3f3f3f3f;using namespace std;struct Mat&#123; int n, m; int mat[MAXN][MAXN]; Mat()&#123; memset(mat, 0, sizeof(mat)); n = m = MAXN; &#125;; Mat operator * (Mat b)&#123; Mat c; c = Mat(); c.n = n; c.m = b.m; for(int i=1; i&lt;=n; ++i) for(int j=1; j&lt;=b.m; ++j)&#123; for(int k=1; k&lt;=m; ++k)&#123; c.mat[i][j] += mat[i][k]*b.mat[k][j]; &#125; &#125; return c; &#125; Mat operator + (Mat b)&#123; Mat c; c.n = n; c.m = m; for (int i=1; i&lt;=n; ++i) for (int j=1; j&lt;=m; ++j) c.mat[i][j] = mat[i][j] + b.mat[i][j]; return c; &#125; void in(int x, int y)&#123; n = x; m = y; for(int i=1; i&lt;=x; ++i) for(int j=1; j&lt;=y; ++j) scanf("%d", &amp;mat[i][j]); &#125; void out()&#123; for(int i=1; i&lt;=n; ++i)&#123; for(int j=1; j&lt;=m; ++j) printf("%d ", mat[i][j]); puts(""); &#125; &#125;&#125;; int main()&#123; int t, n, m, p, q; scanf("%d", &amp;t); Mat a, b, c; for(int d = 1; d &lt;= t; d++)&#123; scanf("%d %d %d %d", &amp;n, &amp;m, &amp;p, &amp;q); a.in(n, m); b.in(p, q); printf("Case %d:\n", d); if(m != p)&#123; printf("ERROR\n"); &#125; else&#123; c = a*b; c.out(); &#125; &#125;&#125;]]></content>
      <categories>
        <category>比赛</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 ACM 国际大学生程序设计竞赛上海大都会赛]]></title>
    <url>%2F2018%2F08%2F05%2F2018-ACM-SHDDH%2F</url>
    <content type="text"><![CDATA[关于比赛传送门：2018 ACM 国际大学生程序设计竞赛上海大都会赛2018 ACM 国际大学生程序设计竞赛上海大都会赛重现赛2018-08-05 12:00:00 至 2018-08-05 17:00:00时长: 5小时 比赛情况实录难度差不多介于省赛和区域赛之间吧。开题A是计算几何，有点思路后就先放下去写签到题，B读错题WA一发，K直接套模板，然后就接着看A。之前写过类似题，没注意数据范围就头铁地交了发n3的代码，TE后才发现数据范围是之前那道十多倍，就听学长的先看D。推十分钟公式无果后打算直接暴力打表，算到最后三个多边形时，HSQ大佬先推出公式（Orz），改过精度问题之后也过了就回去改A。改成n2代码后还是TE，至此一切都结束了。 总结太TM菜，四个月了还是只能写基础题 B，K签到；D题靠HSQ推公式，还卡了下精度问题； A题计算几何，优化到n2，但没想到随机算法，在这题耽误的时间太多； F题扫描线，但没看就比较傻逼；J题数位DP劝退；C题计算几何+大数；E题枚举中点，HASH+二分；H题线段树； G-无解的神题；L快速数论变换（NTT）； 解题报告4类题解肯定没有的，3类题解先填坑，慢慢补吧。 A Fruit Ninja B Perfect Numbers（签到） C Rescue D Thinking-Bear magic E Thinking-Bear’s necklace F Color it G External Square H A Simple Problem with Integers I Matrix Game J Beautiful Numbers K Matrix Multiplication（签到） L Calculation]]></content>
      <categories>
        <category>比赛</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[POJ-1979 Red and Black （DFS or BFS 暴力）]]></title>
    <url>%2F2018%2F08%2F04%2FPOJ-1979%20Red%20and%20Black%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-1979 Red and Black There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can’t move on red tiles, he can move only on black tiles. Write a program to count the number of black tiles which he can reach by repeating the moves described above. 输入描述The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20. There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows. ‘.’ - a black tile‘#’ - a red tile‘@’ - a man on a black tile(appears exactly once in a data set)The end of the input is indicated by a line consisting of two zeros. 输出描述For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself). 示例输入1234567891011121314151617181920212223242526272829303132333435366 9....#......#..............................#@...#.#..#.11 9.#..........#.#######..#.#.....#..#.#.###.#..#.#..@#.#..#.#####.#..#.......#..#########............11 6..#..#..#....#..#..#....#..#..###..#..#..#@...#..#..#....#..#..#..7 7..#.#....#.#..###.###...@...###.###..#.#....#.#..0 0 输出12344559613 题解题目大意给定一个W*H的矩形，里面的值为“.” “#”，其中“.”代表可到达的，“#”表示障碍，某人在一个“@”的起始点，求他所能到达的格子有多少个（包括第一所占的格子）。 思路深搜广搜都行，直接暴力就好。 代码123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;const int MAXN = 1e3 +10;using namespace std;int dx[5] = &#123;1, -1, 0, 0&#125;;int dy[5] = &#123;0, 0, 1, -1&#125;;char MAP[MAXN][MAXN];int book[MAXN][MAXN];int w, h, res, x, y;void dfs(int x, int y)&#123; if(!book[x][y] &amp;&amp; MAP[x][y] != '#')&#123; book[x][y] = 1; res++; for(int i = 0; i &lt; 4; i++)&#123; int xx = x, yy = y; xx += dx[i]; yy += dy[i]; if(xx &gt;= 0 &amp;&amp; yy &gt;= 0 &amp;&amp; xx &lt; h &amp;&amp; yy &lt; w)&#123; dfs(xx, yy); &#125; &#125; &#125; else return;&#125;int main()&#123; while(cin &gt;&gt; w &gt;&gt; h)&#123; if(w == 0 &amp;&amp; h == 0) break; memset(book, 0, sizeof(book)); for(int i = 0; i &lt; h; i++) scanf("%s", MAP[i]); for(int i = 0; i &lt; h; i++) for(int j = 0; j &lt; w; j++) if(MAP[i][j] == '@') x = i, y = j; res = 0; dfs(x, y); cout &lt;&lt; res &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>简单搜索</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-3268 Silver Cow Party （Dijkstra + 逆向建边）]]></title>
    <url>%2F2018%2F08%2F04%2FPOJ-3268%20Silver%20Cow%20Party%2F</url>
    <content type="text"><![CDATA[描述传送门：Silver Cow Party One cow from each of N farms (1 ≤ N ≤ 1000) conveniently numbered 1..N is going to attend the big cow party to be held at farm #X (1 ≤ X ≤ N). A total of M (1 ≤ M ≤ 100,000) unidirectional (one-way roads connects pairs of farms; road i requires Ti (1 ≤ Ti ≤ 100) units of time to traverse. Each cow must walk to the party and, when the party is over, return to her farm. Each cow is lazy and thus picks an optimal route with the shortest time. A cow’s return route might be different from her original route to the party since roads are one-way. Of all the cows, what is the longest amount of time a cow must spend walking to the party and back? 输入描述Line 1: Three space-separated integers, respectively: N, M, and XLines 2..M+1: Line i+1 describes road i with three space-separated integers: Ai, Bi, and Ti. The described road runs from farm Ai to farm Bi, requiring Ti time units to traverse. 输出描述Line 1: One integer: the maximum of time any one cow must walk. 示例输入1Line 1: One integer: the maximum of time any one cow must walk. 输出1234567894 8 21 2 41 3 21 4 72 1 12 3 53 1 23 4 44 2 3 HintCow 4 proceeds directly to the party (3 units) and returns via farms 1 and 3 (7 units), for a total of 10 time units. 题解题目大意有向图，首行给出N，M，X代表有N个点，M条边，接着M行每行u，v，w代表u到v权值为w，求出各点到X加上X到各点最小权值中的最大值。 思路建边的同时，反向建边，各跑一遍Dijkstra。最后遍历所有点维护最大值MAX。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cmath&gt;const int MAXN = 1e3 +5, INF = 0x3f3f3f3f;using namespace std;int n, m, x;int a, b, c;int d[MAXN], dt[MAXN];vector&lt;pair&lt;int, int&gt; &gt;E[MAXN*MAXN], Et[MAXN*MAXN];int main()&#123; cin &gt;&gt; n &gt;&gt; m &gt;&gt; x; for(int i = 0; i &lt; m; i++)&#123; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; E[a].push_back(make_pair(b, c)); Et[b].push_back(make_pair(a, c)); &#125; memset(d, INF, sizeof(d)); memset(dt, INF, sizeof(dt)); priority_queue&lt;pair&lt;int, int&gt; &gt; que; d[x] = 0; que.push(make_pair(-d[x], x)); while(!que.empty())&#123; int now = que.top().second; que.pop(); for(int i = 0; i &lt; E[now].size(); i++)&#123; int v = E[now][i].first; if(d[v] &gt; d[now] + E[now][i].second)&#123; d[v] = d[now] + E[now][i].second; que.push(make_pair(-d[v], v)); &#125; &#125; &#125; dt[x] = 0; que.push(make_pair(-d[x], x)); while(!que.empty())&#123; int now = que.top().second; que.pop(); for(int i = 0; i &lt; Et[now].size(); i++)&#123; int v = Et[now][i].first; if(dt[v] &gt; dt[now] + Et[now][i].second)&#123; dt[v] = dt[now]+Et[now][i].second; que.push(make_pair(-dt[v], v)); &#125; &#125; &#125; int res = 0; for(int i = 1; i &lt;= n; i++)&#123; if(i == x) continue; res = max(res, d[i]+dt[i]); &#125; cout &lt;&lt; res;&#125;/*4 8 21 2 41 3 21 4 72 1 12 3 53 1 23 4 44 2 3*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-3259 Wormholes （SPFA 判定负环）]]></title>
    <url>%2F2018%2F08%2F04%2FPOJ-3259%20Wormholes%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-3259 Wormholes While exploring his many farms, Farmer John has discovered a number of amazing wormholes. A wormhole is very peculiar because it is a one-way path that delivers you to its destination at a time that is BEFORE you entered the wormhole! Each of FJ’s farms comprises N (1 ≤ N ≤ 500) fields conveniently numbered 1..N, M (1 ≤ M ≤ 2500) paths, and W (1 ≤ W ≤ 200) wormholes. As FJ is an avid time-traveling fan, he wants to do the following: start at some field, travel through some paths and wormholes, and return to the starting field a time before his initial departure. Perhaps he will be able to meet himself :) . To help FJ find out whether this is possible or not, he will supply you with complete maps to F (1 ≤ F ≤ 5) of his farms. No paths will take longer than 10,000 seconds to travel and no wormhole can bring FJ back in time by more than 10,000 seconds. 输入描述Line 1: A single integer, F. F farm descriptions follow.Line 1 of each farm: Three space-separated integers respectively: N, M, and WLines 2..M+1 of each farm: Three space-separated numbers (S, E, T) that describe, respectively: a bidirectional path between S and E that requires T seconds to traverse. Two fields might be connected by more than one path.Lines M+2..M+W+1 of each farm: Three space-separated numbers (S, E, T) that describe, respectively: A one way path from S to E that also moves the traveler back T seconds. 输出描述Lines 1..F: For each farm, output “YES” if FJ can achieve his goal, otherwise output “NO” (do not include the quotes). 示例输入1234567891023 3 11 2 21 3 42 3 13 1 33 2 11 2 32 3 43 1 8 输出12NOYES 题解题目大意给定F(1&lt;=F&lt;=5)组数据，对应与一个farm，每组数据对应一个结果。对于其中一组数据，给定 N , M , W ，N为点数，M为无向边数(普通路径，通过之后时间前进)，W为有向边数(虫洞，通过虫洞之后时间倒退)，求每组数据是否存在一条回路能使时间倒退。 思路若存在这样一条回路，则图中肯定存在负环。只要判断是否有负环就行了。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cmath&gt;const int MAXN = 5*1e3, INF = 0x3f3f3f3f;using namespace std;int n, m, w, x, y, z;int vis[MAXN], cnt[MAXN], dis[MAXN];vector&lt;pair&lt;int, int&gt; &gt;E[MAXN];bool SPFA()&#123; queue&lt;int&gt; que; que.push(1); dis[1] = 0; vis[1] = 1; cnt[1]++; while(!que.empty())&#123; int now = que.front(); que.pop(); vis[now] = 0; for(int i = 0; i &lt; E[now].size(); i++)&#123; int v = E[now][i].first; if(dis[v] &gt; dis[now] + E[now][i].second)&#123; dis[v] = dis[now] + E[now][i].second; if(!vis[v])&#123; que.push(v); vis[v] = 1; cnt[v]++; if(cnt[v] &gt;= n)&#123; return true; &#125; &#125; &#125; &#125; &#125; return false;&#125;int main()&#123; int t; scanf("%d", &amp;t); while(t--)&#123; memset(vis, 0, sizeof(vis)); memset(cnt, 0, sizeof(cnt)); memset(dis, INF, sizeof(dis)); for(int i = 0; i &lt;= MAXN; i++) E[i].clear(); scanf("%d %d %d", &amp;n, &amp;m, &amp;w); for(int i = 0; i &lt; m; i++)&#123; scanf("%d %d %d", &amp;x, &amp;y, &amp;z); E[x].push_back(make_pair(y, z)); E[y].push_back(make_pair(x, z)); &#125; for(int i = 0; i &lt; w; i++)&#123; scanf("%d %d %d", &amp;x, &amp;y, &amp;z); E[x].push_back(make_pair(y, -z)); &#125; if(SPFA()) printf("YES\n"); else printf("NO\n"); &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2253 Frogger（建图+最短路变形or最小生成树）]]></title>
    <url>%2F2018%2F08%2F04%2FPOJ-2253%20Frogger%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-2253 Frogger Freddy Frog is sitting on a stone in the middle of a lake. Suddenly he notices Fiona Frog who is sitting on another stone. He plans to visit her, but since the water is dirty and full of tourists’ sunscreen, he wants to avoid swimming and instead reach her by jumping.Unfortunately Fiona’s stone is out of his jump range. Therefore Freddy considers to use other stones as intermediate stops and reach her by a sequence of several small jumps.To execute a given sequence of jumps, a frog’s jump range obviously must be at least as long as the longest jump occuring in the sequence.The frog distance (humans also call it minimax distance) between two stones therefore is defined as the minimum necessary jump range over all possible paths between the two stones. You are given the coordinates of Freddy’s stone, Fiona’s stone and all other stones in the lake. Your job is to compute the frog distance between Freddy’s and Fiona’s stone. 输入描述The input will contain one or more test cases. The first line of each test case will contain the number of stones n (2&lt;=n&lt;=200). The next n lines each contain two integers xi,yi (0 &lt;= xi,yi &lt;= 1000) representing the coordinates of stone #i. Stone #1 is Freddy’s stone, stone #2 is Fiona’s stone, the other n-2 stones are unoccupied. There’s a blank line following each test case. Input is terminated by a value of zero (0) for n. 输出描述For each test case, print a line saying “Scenario #x” and a line saying “Frog Distance = y” where x is replaced by the test case number (they are numbered from 1) and y is replaced by the appropriate real number, printed to three decimals. Put a blank line after each test case, even after the last one. 示例输入1234567891020 03 4317 419 418 50 输出12345Scenario #1Frog Distance = 5.000Scenario #2Frog Distance = 1.414 题解题目大意青蛙想从一个石子跳到另一个石子，中间有很多石子，要求青蛙跳跃距离应为路径中最大的距离，现在要求所有路径中最小的跳跃距离，就是求所有路径中最大距离的最小值。 思路和POJ-1979 Heavy Transportation这一题很像，建图后都是最大生成树。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;#include&lt;cmath&gt;const int MAXN = 205, INF = 0x3f3f3f3f;using namespace std;struct node&#123; int from, to; double val;&#125;E[MAXN*MAXN];int mp[MAXN][3], F[MAXN];double dis(int x1, int y1, int x2, int y2)&#123; return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));&#125;bool cmp(node a, node b)&#123; return a.val &lt; b.val;&#125;int Find(int x)&#123; if(F[x] == x) return x; else return Find(F[x]);&#125;bool Merge(int x, int y)&#123; x = Find(x); y = Find(y); if(x == y) return false; else F[x] = y; return true;&#125;int main()&#123; int n, x, y; int cas = 1; while(scanf("%d", &amp;n) &amp;&amp; n)&#123; for(int i = 0; i &lt; n; i++) F[i] = i; int k = 0; for(int i = 0; i &lt; n; i++)&#123; scanf("%d %d", &amp;mp[i][0], &amp;mp[i][1]); for(int j = 0; j &lt; i; j++)&#123; E[k].from = i; E[k].to = j; E[k++].val = dis(mp[i][0], mp[i][1], mp[j][0], mp[j][1]); &#125; &#125; sort(E, E+k, cmp); double res = 0; for(int i = 0; i &lt; k; i++)&#123; if(Merge(E[i].from, E[i].to))&#123; if(Find(0) == Find(1))&#123; res = E[i].val; break; &#125; &#125; &#125; printf("Scenario #%d\n", cas++); printf("Frog Distance = %.3f\n\n", res); &#125;&#125;/*20 03 4317 419 418 50*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2387 Til the Cows Come Home （Dijkstra or SPFA 水题）]]></title>
    <url>%2F2018%2F08%2F04%2FPOJ-2387%20Til%20the%20Cows%20Come%20Home%2F</url>
    <content type="text"><![CDATA[描述传送门：text Bessie is out in the field and wants to get back to the barn to get as much sleep as possible before Farmer John wakes her for the morning milking. Bessie needs her beauty sleep, so she wants to get back as quickly as possible. Farmer John’s field has N (2 &lt;= N &lt;= 1000) landmarks in it, uniquely numbered 1..N. Landmark 1 is the barn; the apple tree grove in which Bessie stands all day is landmark N. Cows travel in the field using T (1 &lt;= T &lt;= 2000) bidirectional cow-trails of various lengths between the landmarks. Bessie is not confident of her navigation ability, so she always stays on a trail from its start to its end once she starts it. Given the trails between the landmarks, determine the minimum distance Bessie must walk to get back to the barn. It is guaranteed that some such route exists. 输入描述 Line 1: Two integers: T and N Lines 2..T+1: Each line describes a trail as three space-separated integers. The first two integers are the landmarks between which the trail travels. The third integer is the length of the trail, range 1..100. 输出描述 Line 1: A single integer, the minimum distance that Bessie must travel to get from landmark N to landmark 1. 示例输入1234565 51 2 202 3 303 4 204 5 201 5 100 输出190 HintINPUT DETAILS: There are five landmarks. OUTPUT DETAILS: Bessie can get home by following trails 4, 3, 2, and 1. 题解题目大意有N个点，给出从a点到b点的距离，当然a和b是互相可以抵达的，问从1到n的最短距离 思路模板题 代码1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;const int MAXN = 1e3 +5, INF = 0x3f3f3f3f;using namespace std;int n, m;int d[MAXN];vector&lt;pair&lt;int, int&gt; &gt;E[MAXN];int main()&#123; while(cin &gt;&gt; n &gt;&gt; m)&#123; memset(d, INF, sizeof(d)); for(int i = 0; i &lt; MAXN; i++)&#123; E[i].clear(); &#125; for(int i = 0; i &lt; n; i++)&#123; int a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c; E[a].push_back(make_pair(b, c)); E[b].push_back(make_pair(a, c)); &#125; priority_queue&lt;pair&lt;int, int&gt; &gt; que; d[1] = 0 ; que.push(make_pair(-d[1], 1)); while(!que.empty())&#123; int now = que.top().second; que.pop(); for(int i = 0; i &lt; E[now].size(); i++)&#123; int v = E[now][i].first; if(d[v] &gt; d[now] + E[now][i].second)&#123; d[v] = d[now]+E[now][i].second; que.push(make_pair(-d[v], v)); &#125; &#125; &#125; cout &lt;&lt; d[m] &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1125 Stockbroker Grapevine（Floyd）]]></title>
    <url>%2F2018%2F08%2F04%2FPOJ-1125%20Stockbroker%20Grapevine%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-1125 Stockbroker Grapevine Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way. Unfortunately for you, stockbrokers only trust information coming from their “Trusted sources” This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information. 输入描述Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts (n), followed by n pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a ‘1’ means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules. Each person is numbered 1 through to the number of stockbrokers. The time taken to pass the message on will be between 1 and 10 minutes (inclusive), and the number of contacts will range between 0 and one less than the number of stockbrokers. The number of stockbrokers will range from 1 to 100. The input is terminated by a set of stockbrokers containing 0 (zero) people. 输出描述For each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes.It is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message “disjoint”. Note that the time taken to pass the message from person A to person B is not necessarily the same as the time taken to pass it from B to A, if such transmission is possible at all. 示例输入123456789101132 2 4 3 52 1 2 3 62 1 2 2 253 4 4 2 8 5 31 5 84 1 6 4 10 2 7 5 202 2 5 1 50 输出123 23 10 题解题目大意此题题意远比题目难~股票经纪人要在一群人中散布一个谣言，而谣言只能在亲密的人中传递，题目各处了人与人之间的关系及传递谣言所用的时间，要求程序给出应以那个人为起点，可以在最短的时间内让所有的人都得知这个谣言。要注意从a到b传递的时间不一定等于从b到a的时间，如果没有方案能够让每一个人都知道谣言，则输出”disjoint”。题目数据的输入第一行为n，代表总人数，当n=0时结束程序，接着n行，第i+1行的第一个是一个整数t，表示第i个人与t个人的关系要好，接着有t对整数，每对的第一个数是j，表示i与j要好，第二个数是从i直接传递谣言到j所用的时间，数据的输出是两个整数，第一个为选点的散布谣言的起点，第二个整数时所有人得知谣言的最短时间例如，对于数据1，可知如果从3开始传播，则1，2得知谣言的时间都是2，所用的时间比从1，2开始传播所用的时间要短，故程序的输出时3 2； 思路题意理解后思路就比较清晰了，先Floyd更新所有点的最短路，再遍历更新最大值MAX。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;const int MAXN = 1e3 +5, INF = 0x3f3f3f3f;using namespace std;int n, m;vector&lt;pair&lt;int, int&gt; &gt;E[MAXN];int mp[MAXN][MAXN];int main()&#123; while(cin &gt;&gt; n &amp;&amp; n)&#123; memset(mp, INF, sizeof(mp)); for(int i = 1; i &lt;= n; i++)&#123; cin &gt;&gt; m; for(int j = 1; j &lt;= m; j++)&#123; int pos, val; cin &gt;&gt; pos &gt;&gt; val; mp[i][pos] = val; &#125; &#125; for(int k = 1; k &lt;= n; k++)&#123; for(int i = 1; i &lt;= n; i++)&#123; for(int j = 1; j &lt;= n; j++)&#123; mp[i][j] = min(mp[i][j], mp[i][k]+mp[k][j]); &#125; &#125; &#125; int MAX_i = 0, MAX_val = INF; for(int i = 1; i &lt;= n; i++)&#123; int MAX = 0; for(int j = 1; j &lt;= n; j++)&#123; if(i == j) continue; MAX = max(MAX, mp[i][j]); &#125; if(MAX_val &gt; MAX)&#123; MAX_val = MAX; MAX_i = i; &#125; &#125; if(MAX_val == INF) cout &lt;&lt; "disjoint" &lt;&lt; endl; else cout &lt;&lt; MAX_i &lt;&lt; " " &lt;&lt;MAX_val &lt;&lt; endl; &#125;&#125;/*32 2 4 3 52 1 2 3 62 1 2 2 253 4 4 2 8 5 31 5 84 1 6 4 10 2 7 5 202 2 5 1 50*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1511 Invitation Cards（双向单源最短路 Dijstra+heap or SPFA）]]></title>
    <url>%2F2018%2F08%2F04%2FPOJ-1511%20Invitation%20Cards%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-1511 Invitation Cards In the age of television, not many people attend theater performances. Antique Comedians of Malidinesia are aware of this fact. They want to propagate theater and, most of all, Antique Comedies. They have printed invitation cards with all the necessary information and with the programme. A lot of students were hired to distribute these invitations among the people. Each student volunteer has assigned exactly one bus stop and he or she stays there the whole day and gives invitation to people travelling by bus. A special course was taken where students learned how to influence people and what is the difference between influencing and robbery. The transport system is very special: all lines are unidirectional and connect exactly two stops. Buses leave the originating stop with passangers each half an hour. After reaching the destination stop they return empty to the originating stop, where they wait until the next full half an hour, e.g. X:00 or X:30, where ‘X’ denotes the hour. The fee for transport between two stops is given by special tables and is payable on the spot. The lines are planned in such a way, that each round trip (i.e. a journey starting and finishing at the same stop) passes through a Central Checkpoint Stop (CCS) where each passenger has to pass a thorough check including body scan. All the ACM student members leave the CCS each morning. Each volunteer is to move to one predetermined stop to invite passengers. There are as many volunteers as stops. At the end of the day, all students travel back to CCS. You are to write a computer program that helps ACM to minimize the amount of money to pay every day for the transport of their employees. 输入描述The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case begins with a line containing exactly two integers P and Q, 1 &lt;= P,Q &lt;= 1000000. P is the number of stops including CCS and Q the number of bus lines. Then there are Q lines, each describing one bus line. Each of the lines contains exactly three numbers - the originating stop, the destination stop and the price. The CCS is designated by number 1. Prices are positive integers the sum of which is smaller than 1000000000. You can also assume it is always possible to get from any stop to any other stop. 输出描述For each case, print one line containing the minimum amount of money to be paid each day by ACM for the travel costs of its volunteers. 示例输入123456789101122 21 2 132 1 334 61 2 102 1 601 3 203 4 102 4 54 1 50 输出1246210 题解题目大意给定一个有向图，求一个点到所有点的最短距离之和加上所有点到这个点距离之和。图中的节点个数范围：0～1e6; 思路建图时反向建边，先做一次Dijkstra，然后将所有的边反序做一次Dijkstra即可，Dijkstra必须是heap优化的。SPFA同理，先做一次spfa，然后将所有的边反序做一次spfa即可。 代码Dijkstra1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;functional&gt;#include&lt;vector&gt;#include&lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int,int&gt; p;const int N = 1e6+5, int INF = 0x3f3f3f3f;struct edge&#123; int to,cost;&#125;;vector&lt;edge&gt;eg[N];int V,E;bool used[N];int d[N];int a[N],b[N],c[N];void dijkstra(int s)&#123; for(int i=1;i&lt;=V;i++)&#123; d[i]=INF; &#125; priority_queue&lt;p,vector&lt;p&gt;,greater&lt;p&gt; &gt; que; d[1] = 0; que.push(p(d[1], 1)); while(!que.empty())&#123; int now = que.top().second; que.pop(); for(int i = 0; i &lt; eg[now].size(); i++)&#123; int v = eg[now][i].to; if(d[v] &gt; d[now] + eg[now][i].cost)&#123; d[v] = d[now] + eg[now][i].cost; que.push(p(d[v], v)); &#125; &#125; &#125;&#125;int main()&#123; int q; scanf("%d",&amp;q); while(q--)&#123; scanf("%d %d",&amp;V,&amp;E); for(int i=1;i&lt;=V;i++)&#123; eg[i].clear(); &#125; for(int i=1;i&lt;=E;i++)&#123; scanf("%d%d%d",&amp;a[i],&amp;b[i],&amp;c[i]); edge gg; gg.to=b[i],gg.cost=c[i]; eg[a[i]].push_back(gg); &#125; dijkstra(1); LL sum=0; for(int i=1;i&lt;=V;i++)&#123; sum+=d[i]; &#125; for(int i=1;i&lt;=V;i++)&#123; eg[i].clear(); &#125; for(int i=1;i&lt;=E;i++)&#123; edge gg; gg.to=a[i],gg.cost=c[i]; eg[b[i]].push_back(gg); &#125; dijkstra(1); for(int i=1;i&lt;=V;i++)&#123; sum+=d[i]; &#125; printf("%lld\n",sum); &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1979 Heavy Transportation （最大生成树）]]></title>
    <url>%2F2018%2F08%2F04%2FPOJ-1979%20Heavy%20Transportation%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-1979 Heavy Transportation BackgroundHugo Heavy is happy. After the breakdown of the Cargolifter project he can now expand business. But he needs a clever man who tells him whether there really is a way from the place his customer has build his giant steel crane to the place where it is needed on which all streets can carry the weight.Fortunately he already has a plan of the city with all streets and bridges and all the allowed weights.Unfortunately he has no idea how to find the the maximum weight capacity in order to tell his customer how heavy the crane may become. But you surely know. ProblemYou are given the plan of the city, described by the streets (with weight limits) between the crossings, which are numbered from 1 to n. Your task is to find the maximum weight that can be transported from crossing 1 (Hugo’s place) to crossing n (the customer’s place). You may assume that there is at least one path. All streets can be travelled in both directions. 输入描述The first line contains the number of scenarios (city plans). For each city the number n of street crossings (1 &lt;= n &lt;= 1000) and number m of streets are given on the first line. The following m lines contain triples of integers specifying start and end crossing of the street and the maximum allowed weight, which is positive and not larger than 1000000. There will be at most one street between each pair of crossings. 输出描述The output for every scenario begins with a line containing “Scenario #i:”, where i is the number of the scenario starting at 1. Then print a single line containing the maximum allowed weight that Hugo can transport to the customer. Terminate the output for the scenario with a blank line. 示例输入1234513 31 2 31 3 42 3 5 输出12Scenario #1:4 题解题目大意从城市1到城市N运送货物，有M条道路，每条道路都是双向的，每条道路都有它的最大载重量，问从城市1到城市N运送最多的重量是多少。 思路这一题方法不唯一，生成树变形和最短路变形都能过这题，我当时使用kruscal水过了，有机会把几种写法都补齐。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;const int MAXN = 1111, INF = 0x3f3f3f3f;using namespace std;int F[MAXN];struct node&#123; int from, to, val;&#125;E[1000005];bool cmp(node a, node b)&#123; return a.val &gt; b.val;&#125;int Find(int x)&#123; if(F[x] == x) return x; else return Find(F[x]);&#125;bool Merge(int x, int y)&#123; x = Find(x); y = Find(y); if(x == y) return false; else F[x] = y; return true;&#125;int main()&#123; int t, n, m; scanf("%d", &amp;t); for(int d = 1; d &lt;= t; d++)&#123; scanf("%d %d", &amp;n, &amp;m); for(int i = 0; i &lt;= n; i++)&#123; F[i] = i; &#125; for(int i = 0; i &lt; m; i++)&#123; scanf("%d %d %d", &amp;E[i].from, &amp;E[i].to, &amp;E[i].val); &#125; sort(E, E+m, cmp); int res; for(int i = 0; i &lt; m; i++)&#123; if(Merge(E[i].from, E[i].to))&#123; if(Find(1) == Find(n))&#123; res = E[i].val; break; &#125; &#125; &#125; cout &lt;&lt; "Scenario #" &lt;&lt; d &lt;&lt; ":" &lt;&lt; endl; cout &lt;&lt; res &lt;&lt; endl &lt;&lt; endl; &#125;&#125;/*23 31 2 31 3 42 3 54 31 2 61 3 32 4 1*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HYSBZ-2038 小Z的袜子(hose)（莫队）]]></title>
    <url>%2F2018%2F08%2F04%2FHYSBZ-2038%20%E5%B0%8FZ%E7%9A%84%E8%A2%9C%E5%AD%90(hose)%2F</url>
    <content type="text"><![CDATA[描述传送门：[2009国家集训队]小Z的袜子(hose) 作为一个生活散漫的人，小Z每天早上都要耗费很久从一堆五颜六色的袜子中找出一双来穿。终于有一天，小Z再也无法忍受这恼人的找袜子过程，于是他决定听天由命……具体来说，小Z把这N只袜子从1到N编号，然后从编号L到R(L 尽管小Z并不在意两只袜子是不是完整的一双，甚至不在意两只袜子是否一左一右，他却很在意袜子的颜色，毕竟穿两只不同色的袜子会很尴尬。你的任务便是告诉小Z，他有多大的概率抽到两只颜色相同的袜子。当然，小Z希望这个概率尽量高，所以他可能会询问多个(L,R)以方便自己选择。 输入描述作为一个生活散漫的人，小Z每天早上都要耗费很久从一堆五颜六色的袜子中找出一双来穿。终于有一天，小Z再也无法忍受这恼人的找袜子过程，于是他决定听天由命……具体来说，小Z把这N只袜子从1到N编号，然后从编号L到R(L 尽管小Z并不在意两只袜子是不是完整的一双，甚至不在意两只袜子是否一左一右，他却很在意袜子的颜色，毕竟穿两只不同色的袜子会很尴尬。你的任务便是告诉小Z，他有多大的概率抽到两只颜色相同的袜子。当然，小Z希望这个概率尽量高，所以他可能会询问多个(L,R)以方便自己选择。 输出描述包含M行，对于每个询问在一行中输出分数A/B表示从该询问的区间[L,R]中随机抽出两只袜子颜色相同的概率。若该概率为0则输出0/1，否则输出的A/B必须为最简分数。（详见样例） 示例输入1234566 41 2 3 3 3 22 61 33 51 6 输出12342/50/11/14/15 Hint询问1：共C(5,2)=10种可能，其中抽出两个2有1种可能，抽出两个3有3种可能，概率为(1+3)/10=4/10=2/5。 询问2：共C(3,2)=3种可能，无法抽到颜色相同的袜子，概率为0/3=0/1。 询问3：共C(3,2)=3种可能，均为抽出两个3，概率为3/3=1/1。 注：上述C(a, b)表示组合数，组合数C(a, b)等价于在a个不同的物品中选取b个的选取方案数。 题解题目大意中文题面 思路莫涛大佬的论文题假设区间为[L,R]，分母为(R-L+1)(R-L)。分子为\sum{cnt[x](cnt[x]-1)}，cnt[x]表示当前区间内颜色为x的袜子的数量。区间每增加1，假设增加了一个颜色为x的袜子，在原区间中x颜色的袜子对答案的贡献为cnt[x](cnt[x]-1)，现在贡献为cnt[x]++后的cnt[x]*(cnt[x]-1)，直接计算两个之间的差值不方便，我们可以减去原区间中x颜色的袜子对答案的贡献，然后cnt[x]++或–，再加上x颜色的袜子对答案的贡献。（来自ZSC）下面这个博客有对莫队更深的讲解【莫队算法】-大米饼 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;math.h&gt;#include&lt;cstring&gt;#define ll long longusing namespace std;const int N = 50003;struct Mo&#123; int l,r,ID; ll A,B;&#125;q[N];ll S(ll x)&#123; return x*x;&#125;ll GCD(ll a,ll b)&#123; while(b^=a^=b^=a%=b); return a;&#125;int n,m,col[N],unit,Be[N];ll sum[N],ans;bool cmp(Mo a,Mo b)&#123; return Be[a.l]==Be[b.l] ? a.r&lt;b.r : a.l&lt;b.l;&#125;bool CMP(Mo a,Mo b)&#123; return a.ID&lt;b.ID;&#125;;void revise(int x, int add)&#123; ans -= S(sum[col[x]]); sum[col[x]] += add; ans += S(sum[col[x]]);&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); unit=sqrt(n); for(int i = 1; i &lt;= n; i++)&#123; scanf("%d", &amp;col[i]); Be[i]=i/unit+1; &#125; for(int i = 1; i &lt;= m; i++)&#123; scanf("%d%d", &amp;q[i].l,&amp;q[i].r); q[i].ID=i; &#125; sort(q+1,q+m+1,cmp); int l=1, r=0; for(int i = 1; i &lt;= m; i++)&#123; while(l&lt;q[i].l)revise(l,-1),l++; while(l&gt;q[i].l)revise(l-1,1),l--; while(r&lt;q[i].r)revise(r+1,1),r++; while(r&gt;q[i].r)revise(r,-1),r--; if(q[i].l==q[i].r)&#123;q[i].A=0;q[i].B=1;continue;&#125; q[i].A=ans-(q[i].r-q[i].l+1); q[i].B=1LL*(q[i].r-q[i].l+1)*(q[i].r-q[i].l); ll gcd=GCD(q[i].A,q[i].B);q[i].A/=gcd;q[i].B/=gcd; &#125; sort(q+1,q+m+1,CMP); for(int i = 1; i &lt;= m; i++)&#123; printf("%lld/%lld\n",q[i].A,q[i].B); &#125;&#125; ZSC巨巨版，感觉更容易懂123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 50005;typedef long long LL;int n, Q, a[MAXN];struct Query&#123; int l, r, id; LL A, B;&#125;q[MAXN];int block, cnt[MAXN], pos[MAXN], l, r;LL sum;bool cmp(Query a, Query b)&#123; return pos[a.l]!=pos[b.l]?a.l&lt;b.l:a.r&lt;b.r; &#125;bool cmp_id(Query a, Query b)&#123; return a.id &lt; b.id; &#125;void update(int x, int d)&#123; sum -= cnt[x]*(cnt[x]-1); cnt[x] += d; sum += cnt[x]*(cnt[x]-1);&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;Q); block = sqrt(n); for (int i = 1; i &lt;= n; i++) scanf("%d", &amp;a[i]), pos[i] = (i-1)/block+1; for (int i = 0; i &lt; Q; i++) scanf("%d%d", &amp;q[i].l, &amp;q[i].r), q[i].id = i; sort(q, q+Q, cmp); l = 1, r = 0, sum = 0; for (int i = 0; i &lt; Q; i++) &#123; while (l &lt; q[i].l) update(a[l++], -1); while (l &gt; q[i].l) update(a[--l], 1); while (r &lt; q[i].r) update(a[++r], 1); while (r &gt; q[i].r) update(a[r--], -1); if (q[i].l == q[i].r) &#123; q[i].A = 0, q[i].B = 1; continue; &#125; q[i].A = sum; q[i].B = 1LL*(r-l+1)*(r-l); LL G = __gcd(q[i].A, q[i].B); q[i].A /= G; q[i].B /= G; &#125; sort(q, q+Q, cmp_id); for (int i = 0; i &lt; Q; i++) printf("%lld/%lld\n", q[i].A, q[i].B); return 0;&#125;/*6 41 2 3 3 3 22 61 33 51 6*/]]></content>
      <categories>
        <category>题解</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>分块</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UVA-10305 Ordering Tasks（拓扑序 水题）]]></title>
    <url>%2F2018%2F08%2F04%2FUVA-10305%20Ordering%20Tasks%2F</url>
    <content type="text"><![CDATA[描述传送门：UVA-10305 Ordering Tasks John has n tasks to do. Unfortunately, the tasks are not independent and the execution of one task isonly possible if other tasks have already been executed. 输入描述The input will consist of several instances of the problem. Each instance begins with a line containingtwo integers, 1 ≤ n ≤ 100 and m. n is the number of tasks (numbered from 1 to n) and m is thenumber of direct precedence relations between tasks. After this, there will be m lines with two integersi and j, representing the fact that task i must be executed before task j.An instance with n = m = 0 will finish the input. 输出描述For each instance, print a line with n integers representing the tasks in a possible order of execution. 示例输入1234565 41 22 31 31 50 0 输出11 4 2 5 3 题解题目大意给出n组数据，前面的的序号表示这个任务先于后面序号的任务，要求将任务先后排序（不一定有一种） 思路拓扑序模板题，将入度为零的点进队，每次出队更新入度，继续将入度为零的点进队，最后输出。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;bits/stdc++.h&gt;const int MAXN = 105, INF = 0x3f3f3f3f;using namespace std;int n, m, u, v;int vis[MAXN], used[MAXN];vector&lt;int&gt; E[MAXN];int main()&#123; while(~scanf("%d %d", &amp;n, &amp;m) &amp;&amp; (n || m))&#123; memset(vis, 0, sizeof(vis)); memset(used, 0, sizeof(used)); for(int i = 0; i &lt;= n; i++) E[i].clear(); for(int i = 0; i &lt; m; i++)&#123; scanf("%d %d", &amp;u, &amp;v); E[u].push_back(v); vis[v]++; &#125; queue&lt;int&gt;que, ans; for(int i = 1; i &lt;= n; i++)&#123; if(vis[i] == 0)&#123; que.push(i); &#125; &#125; while(!que.empty())&#123; int now = que.front(); que.pop(); ans.push(now); for(int i = 0; i &lt; E[now].size(); i++)&#123; if(--vis[E[now][i]] == 0)&#123; que.push(E[now][i]); &#125; &#125; &#125; printf("%d", ans.front()); ans.pop(); while(!ans.empty())&#123; printf(" %d", ans.front()); ans.pop(); &#125; printf("\n"); &#125;&#125;/*5 41 22 31 31 50 0*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>TopSort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU-1285 确定比赛名次（拓扑序）]]></title>
    <url>%2F2018%2F08%2F04%2FHDU-1285%20%E7%A1%AE%E5%AE%9A%E6%AF%94%E8%B5%9B%E5%90%8D%E6%AC%A1%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1285 确定比赛名次 有N个比赛队（1&lt;=N&lt;=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。 输入描述输入有若干组，每组中的第一行为二个数N（1&lt;=N&lt;=500），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。 输出描述给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。 其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。 示例输入12344 31 22 34 3 输出11 2 4 3 题解题目大意中文题面 思路比较裸的拓扑排序题。我是用邻接表写的，邻接矩阵的话注意重边即可了。还有本题符合条件的排名可能不是唯一的，此时坑点要求输出时编号小的队伍在前。其次就是输出格式的限定。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;bits/stdc++.h&gt;const int MAXN = 510, INF = 0x3f3f3f3f;using namespace std;int n, m, u, v;int vis[MAXN*MAXN], used[MAXN];vector&lt;int&gt; E[MAXN];int main()&#123; while(~scanf("%d %d", &amp;n, &amp;m))&#123; memset(vis, 0, sizeof(vis)); memset(used, 0, sizeof(used)); for(int i = 0; i &lt;= n; i++) E[i].clear(); for(int i = 0; i &lt; m; i++)&#123; scanf("%d %d", &amp;u, &amp;v); E[u].push_back(v); vis[v]++; &#125; queue&lt;int&gt; Q; for(int i = 1; i &lt;= n; i++)&#123; int j = 1; while(used[j] || vis[j] != 0) j++; vis[j] = 1; Q.push(j); for(int k= 0; k &lt; E[j].size(); k++)&#123; vis[E[j][k]]--; &#125; &#125; printf("%d", Q.front()); Q.pop(); while(!Q.empty())&#123; printf(" %d", Q.front()); Q.pop(); &#125; printf("\n"); &#125;&#125;/*4 31 22 34 3*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>拓扑序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言培训总复习标程]]></title>
    <url>%2F2018%2F08%2F03%2FC%E8%AF%AD%E8%A8%80%E5%9F%B9%E8%AE%AD%E6%80%BB%E5%A4%8D%E4%B9%A0%E6%A0%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言不好意思，平时都是写C++，所以格式上可能和大家学的C有点出入。 A12345678#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; long long int a, b; scanf("%lld %lld", &amp;a, &amp;b); printf("%lld", a+b);&#125; B12345678910111213141516171819202122#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n; scanf("%d",&amp;n); int sum = 0; for(int i = 1 ; i &lt;= n; i++)&#123; if( n%i == 0 )&#123; sum++; &#125; &#125; if(sum%2 ==0)&#123; puts("even"); &#125; else&#123; puts("odd"); &#125;&#125; C1234567891011121314151617#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n, num = 0, a[1010]; scanf("%d", &amp;n); for(int i = 0; i &lt; n; i++)&#123; scanf("%d", &amp;a[i]); &#125; for(int i = 0; i &lt; n; i++)&#123; if(a[i] == 4 || a[i] == 3 || a[i]== 9 || a[i]== 6)&#123; num++; &#125; &#125; printf("%d", num);&#125; D1234567891011121314151617181920212223242526#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; char ch; int n, nb = 0, sb = 0, a[1010]; scanf("%d", &amp;n); for(int i = 0; i &lt; n; i++)&#123; scanf("%c", &amp;ch); if(ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z')&#123; nb++; &#125; else&#123; sb++; &#125; &#125; if(sb &lt; nb)&#123; puts("ZHYNB"); &#125; else if(sb &gt; nb)&#123; puts("HSQSB"); &#125; else&#123; puts("ZCRZCR"); &#125;&#125; E1234567891011121314151617#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int year, month, day; int date[13] = &#123;0,31,28,31,30,31,30,31,31,30,31,30,31&#125;; scanf ("%d/%d/%d", &amp;year, &amp;month, &amp;day); int sum = 0; if (year % 4 == 0 &amp;&amp; year % 100 != 0 || year % 400 == 0)&#123; date[2]++; &#125; for (int i = 1; i &lt; month; i ++)&#123; sum += date[i]; &#125; sum += day; printf ("%d\n", sum);&#125; 扯淡大家真的是非常优秀，我去年是在军训时才打下自己的第一句Hello World，暑假啥也没学，啥也没看，所以很佩服大家。学习这事不要急，慢慢来，当时一个排序、一个打印菱形就能磕我一下午。但无论如何你最后选择了什么方向，大学都一定不要荒废。anyway，祝大家有一个充实的大学生活~–没错，我就是群里那个叫“何世全”的（感谢队友不杀之恩情）。]]></content>
      <categories>
        <category>题解</category>
        <category>标程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HihoCoder-1175 拓扑排序·二（拓扑序 判断循环图）]]></title>
    <url>%2F2018%2F08%2F03%2FHihoCoder-1175%20%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%C2%B7%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[描述传送门：HihoCoder-1175 拓扑排序·二 小Hi和小Ho所在学校的校园网被黑客入侵并投放了病毒。这事在校内BBS上立刻引起了大家的讨论，当然小Hi和小Ho也参与到了其中。从大家各自了解的情况中，小Hi和小Ho整理得到了以下的信息： 校园网主干是由N个节点(编号1..N)组成，这些节点之间有一些单向的网路连接。若存在一条网路连接(u,v)链接了节点u和节点v，则节点u可以向节点v发送信息，但是节点v不能通过该链接向节点u发送信息。在刚感染病毒时，校园网立刻切断了一些网络链接，恰好使得剩下网络连接不存在环，避免了节点被反复感染。也就是说从节点i扩散出的病毒，一定不会再回到节点i。当1个病毒感染了节点后，它并不会检查这个节点是否被感染，而是直接将自身的拷贝向所有邻居节点发送，它自身则会留在当前节点。所以一个节点有可能存在多个病毒。现在已经知道黑客在一开始在K个节点上分别投放了一个病毒。举个例子，假设切断部分网络连接后学校网络如下图所示，由4个节点和4条链接构成。最开始只有节点1上有病毒。 最开始节点1向节点2和节点3传送了病毒，自身留有1个病毒： 其中一个病毒到达节点2后，向节点3传送了一个病毒。另一个到达节点3的病毒向节点4发送自己的拷贝： 当从节点2传送到节点3的病毒到达之后，该病毒又发送了一份自己的拷贝向节点4。此时节点3上留有2个病毒： 最后每个节点上的病毒为： 小Hi和小Ho根据目前的情况发现一段时间之后，所有的节点病毒数量一定不会再发生变化。那么对于整个网络来说，最后会有多少个病毒呢？ 输入描述第1行：3个整数N,M,K，1≤K≤N≤100,000，1≤M≤500,000 第2行：K个整数A[i]，A[i]表示黑客在节点A[i]上放了1个病毒。1≤A[i]≤N 第3..M+2行：每行2个整数 u,v，表示存在一条从节点u到节点v的网络链接。数据保证为无环图。1≤u,v≤N 输出描述第1行：1个整数，表示最后整个网络的病毒数量 MOD 142857 示例输入1234564 4 111 21 32 33 4 输出16 题解题目大意中文题面 思路从入度为0的节点开始，对于这些节点，它并不会再增加病毒数量。那么我们就根据它所关联的连接将病毒分发出去，然后这个节点就没有作用了。那不妨就删掉好了，它所关联的边也删掉，这样图中又会产生一些新的没有入度的节点。这样一直删点，直到所有的点都被删掉，将所有点的病毒数量加起来就是总的病毒数。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cmath&gt;const int MAXN = 5*1e5, INF = 0x3f3f3f3f, MOD = 142857;using namespace std;int n, m, k, u, v, x;int inDeg[MAXN], virus[MAXN];vector&lt;int&gt; E[MAXN];void topsort()&#123; queue&lt;int&gt; q; for(int i = 1; i &lt;= n; i++) if(!inDeg[i]) q.push(i); while(!q.empty())&#123; int now = q.front(); q.pop(); for(int i = 0; i &lt; E[now].size(); i++)&#123; if(--inDeg[E[now][i]] == 0)&#123; q.push(E[now][i]); &#125; virus[E[now][i]] = (virus[E[now][i]] + virus[now])%MOD; &#125; &#125;&#125;int main()&#123; while(~scanf("%d %d %d", &amp;n, &amp;m, &amp;k))&#123; memset(inDeg, 0, sizeof(inDeg)); memset(virus, 0, sizeof(virus)); for(int i = 0; i &lt;= n; i++) E[i].clear(); for(int i = 0; i &lt; k; i++)&#123; scanf("%d", &amp;x); virus[x]++; &#125; for(int i = 0; i &lt; m; i++)&#123; scanf("%d %d", &amp;u, &amp;v); E[u].push_back(v); inDeg[v]++; &#125; topsort(); int ans = 0; for(int i = 1; i &lt;= n; i++)&#123; ans = (ans + virus[i])%MOD; &#125; printf("%d\n", ans); &#125;&#125;/*4 4 111 21 32 33 4*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>TopSort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HihoCoder-1174 拓扑排序·一（拓扑序 判断循环图）]]></title>
    <url>%2F2018%2F08%2F03%2FHihoCoder-1174%20%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%C2%B7%E4%B8%80%2F</url>
    <content type="text"><![CDATA[描述传送门：HihoCoder-1174拓扑排序·一 我们都知道大学的课程是可以自己选择的，每一个学期可以自由选择打算学习的课程。唯一限制我们选课是一些课程之间的顺序关系：有的难度很大的课程可能会有一些前置课程的要求。比如课程A是课程B的前置课程，则要求先学习完A课程，才可以选择B课程。大学的教务收集了所有课程的顺序关系，但由于系统故障，可能有一些信息出现了错误。现在小Ho把信息都告诉你，请你帮小Ho判断一下这些信息是否有误。错误的信息主要是指出现了”课程A是课程B的前置课程，同时课程B也是课程A的前置课程”这样的情况。当然”课程A是课程B的前置课程，课程B是课程C的前置课程，课程C是课程A的前置课程”这类也是错误的。 输入描述第1行：1个整数T，表示数据的组数T(1 &lt;= T &lt;= 5)接下来T组数据按照以下格式：第1行：2个整数，N,M。N表示课程总数量，课程编号为1..N。M表示顺序关系的数量。1 &lt;= N &lt;= 100,000. 1 &lt;= M &lt;= 500,000第2..M+1行：每行2个整数，A,B。表示课程A是课程B的前置课程。 输出描述第1..T行：每行1个字符串，若该组信息无误，输出”Correct”，若该组信息有误，输出”Wrong”。 示例输入123456722 21 22 13 21 21 3 输出12WrongCorrect 题解题目大意中文题面 思路先扫描所有点和边维护每一个点的入度值，复杂度O(N+M)。 把入度为0的点加入队列Q中，当然有可能存在多个入度为0的点，同时它们之间也不会存在连接关系，所以按照任意顺序加入Q都是可以的。从Q中取出一个点p。对于每一个未删除且与p相连的点q，入度值-1；如果入读值为0，把q加入Q。不断重复第3步，直到Q为空。最后剩下的未被删除的点，也就是组成环的点了。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstdio&gt;#include &lt;queue&gt;#include &lt;cmath&gt;const int MAXN = 5*1e5, INF = 0x3f3f3f3f, MOD = 142857;using namespace std;int n, m, k, u, v, x;int inq[MAXN];vector&lt;int&gt; E[MAXN];bool topsort()&#123; queue&lt;int&gt; q; int num = 0; for(int i = 1; i &lt;= n; i++)&#123; if(!inq[i])&#123; q.push(i); &#125; &#125; while(!q.empty())&#123; int now = q.front(); q.pop(); num++; for(int i = 0; i &lt; E[now].size(); i++)&#123; if(--inq[E[now][i]] == 0)&#123; q.push(E[now][i]); &#125; &#125; &#125; if(num == n) return true; else return false;&#125;int main()&#123; int t; scanf("%d", &amp;t); while(t--)&#123; scanf("%d %d", &amp;n, &amp;m); memset(inq, 0, sizeof(inq)); for(int i = 0; i &lt;= n; i++) E[i].clear(); for(int i = 0; i &lt; m; i++)&#123; scanf("%d %d", &amp;u, &amp;v); E[u].push_back(v); inq[v]++; &#125; if(topsort()) puts("Correct"); else puts("Wrong"); &#125;&#125;/*22 21 22 13 21 21 3*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>TopSort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-3273 Monthly Expense（二分）]]></title>
    <url>%2F2018%2F08%2F03%2FPOJ-3273%20Monthly%20Expense%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-3273 Monthly Expense Farmer John is an astounding accounting wizard and has realized he might run out of money to run the farm. He has already calculated and recorded the exact amount of money (1 ≤ moneyi ≤ 10,000) that he will need to spend each day over the next N (1 ≤ N ≤ 100,000) days. FJ wants to create a budget for a sequential set of exactly M (1 ≤ M ≤ N) fiscal periods called “fajomonths”. Each of these fajomonths contains a set of 1 or more consecutive days. Every day is contained in exactly one fajomonth. FJ’s goal is to arrange the fajomonths so as to minimize the expenses of the fajomonth with the highest spending and thus determine his monthly spending limit. 输入描述Line 1: Two space-separated integers: N and MLines 2.. N+1: Line i+1 contains the number of dollars Farmer John spends on the ith day 输出描述Line 1: The smallest possible monthly limit Farmer John can afford to live with. 示例输入123456787 5100400300100500101400 输出1500 HintIf Farmer John schedules the months so that the first two days are a month, the third and fourth are a month, and the last three are their own months, he spends at most $500 in any month. Any other method of scheduling gives a larger minimum monthly limit. 题解题目大意分期：将N个账款分割成M个财务期，使得每个分期账款和的最大值最小。给出农夫在n天中每天的花费，要求把这n天分作m组，每组的天数必然是连续的，要求分得各组的花费之和应该尽可能地小，最后输出各组花费之和中的最大值。 思路最大值最小的问题，可以采用二分来解决，二分其中一个值，算另一个结果，找到上届或下届。在这个题中 二分组的最大花费，计算是不是可以分为m组，找出最小的花费。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;stack&gt;#include &lt;queue&gt;const int MAXN = 1e5 +10;const int INF = 0x3f3f3f3f;using namespace std;int n, m;int a[MAXN];bool Judge(int mid)&#123; int cnt = 0; for(int i = 0; i &lt; n;)&#123; if(mid &lt; a[i]) return false; int sum = 0; bool f = true; while(sum+a[i] &lt;= mid)&#123; sum += a[i++]; f = false; &#125; if(f)&#123; i++; &#125; cnt++; &#125; if(cnt &gt; m) return false; else return true;&#125;int main()&#123; scanf("%d %d", &amp;n, &amp;m); for(int i = 0; i &lt; n; i++)&#123; scanf("%d", &amp;a[i]); &#125; int l = 1, r = INF; while(l &lt; r)&#123; int mid = (l+r) &gt;&gt;1; if(Judge(mid))&#123; r = mid; &#125; else&#123; l = mid+1; &#125; &#125; printf("%d", l);&#125;/*5 5100200300400500*/]]></content>
      <categories>
        <category>题解</category>
        <category>基础技巧</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU-1213 How Many Tables（并查集 模板）]]></title>
    <url>%2F2018%2F08%2F03%2FHDU-1213%20How%20Many%20Tables%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1213 How Many Tables Today is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers. One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table. For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least. 输入描述The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases. 输出描述For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks. 示例输入1234567825 31 22 34 55 12 5 输出1224 题解题目大意要宴请一些客人，但是客人彼此之间并不是完全互相认识的，规定如果A认识B，且B认识C，则认为A,B,C互相认识，可以安排在同一桌，求需要安排的桌数。 思路并查集模板题，水题。 代码123456789101112131415161718192021222324252627282930313233343536#include &lt;bits/stdc++.h&gt;using namespace std;const int MAXN = 1e5;int Fa[MAXN];int Find(int x)&#123; if(Fa[x] == x) return x; else return Fa[x] = Find(Fa[x]);&#125;void unite(int x, int y)&#123; x = Find(x); y = Find(y); if(x == y) return; else&#123; Fa[x] = y; &#125;&#125;int main()&#123; int t, n, m, x, y; cin &gt;&gt;t; while(t--)&#123; cin &gt;&gt; n &gt;&gt; m; for(int i = 1; i &lt;= n; i++) Fa[i] = i; while(m--)&#123; cin &gt;&gt; x &gt;&gt; y; unite(x, y); &#125; int ans = 0; for(int i = 1; i &lt;= n; i++)&#123; if(Fa[i] == i) ans++; &#125; printf("%d\n", ans); &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU-1875 畅通工程再续(建图 + Kruscal or Prim)]]></title>
    <url>%2F2018%2F08%2F03%2FHDU-1875%20%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E5%86%8D%E7%BB%AD%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1875 畅通工程再续 相信大家都听说一个“百岛湖”的地方吧，百岛湖的居民生活在不同的小岛中，当他们想去其他的小岛时都要通过划小船来实现。现在政府决定大力发展百岛湖，发展首先要解决的问题当然是交通问题，政府决定实现百岛湖的全畅通！经过考察小组RPRush对百岛湖的情况充分了解后，决定在符合条件的小岛间建上桥，所谓符合条件，就是2个小岛之间的距离不能小于10米，也不能大于1000米。当然，为了节省资金，只要求实现任意2个小岛之间有路通即可。其中桥的价格为 100元/米。 输入描述输入包括多组数据。输入首先包括一个整数T(T &lt;= 200)，代表有T组数据。每组数据首先是一个整数C(C &lt;= 100),代表小岛的个数，接下来是C组坐标，代表每个小岛的坐标，这些坐标都是 0 &lt;= x, y &lt;= 1000的整数。 输出描述每组输入数据输出一行，代表建桥的最小花费，结果保留一位小数。如果无法实现工程以达到全部畅通，输出”oh!”. 示例输入123456782210 1020 2031 12 21000 1000 输出121414.2oh! 题解题目大意中文题面 思路先建图，之后就是最小生成树的模板题。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;bits/stdc++.h&gt;const int MAXN = 105;using namespace std;int num[MAXN][2], F[MAXN];struct node&#123; int from, to; double val;&#125;E[MAXN*MAXN];double Dis(int x1, int y1, int x2, int y2)&#123; return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));&#125;bool cmp(node a, node b)&#123; return a.val &lt; b.val;&#125;int Find(int x)&#123; if(F[x] == x) return x; else return Find(F[x]);&#125;bool Merge(int x, int y)&#123; x = Find(x); y = Find(y); if(x == y) return false; else F[x] = y; return true;&#125;int main()&#123; int t, n; cin &gt;&gt; t; while(t--)&#123; cin &gt;&gt; n; for(int i = 0; i &lt;= n; i++)&#123; F[i] = i; &#125; int k = 0, cnt = 0; double res = 0; for(int i = 0; i &lt; n; i++)&#123; cin &gt;&gt; num[i][0] &gt;&gt; num[i][1]; for(int j = 0; j &lt; i; j++)&#123; E[k].from = i; E[k].to = j; double cost = Dis(num[i][0], num[i][1], num[j][0], num[j][1]); if(cost &gt;= 10 &amp;&amp; cost &lt;= 1000) E[k++].val = cost*100; &#125; &#125; sort(E, E+k, cmp); for(int i = 0; i &lt; k; i++)&#123; if(Merge(E[i].from, E[i].to))&#123; res += E[i].val; cnt++; &#125; &#125; if(cnt == n-1) printf("%.1f\n", res); else cout &lt;&lt; "oh!" &lt;&lt; endl; &#125;&#125;/*2210 1020 2031 12 21000 1000*/]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU-1874 畅通工程续（Dijkstra or Floyd or SPFA 模板题）]]></title>
    <url>%2F2018%2F08%2F03%2FHDU-1874%20%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%E7%BB%AD%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1874 畅通工程续 某省自从实行了很多年的畅通工程计划后，终于修建了很多路。不过路多了也不好，每次要从一个城镇到另一个城镇时，都有许多种道路方案可以选择，而某些方案要比另一些方案行走的距离要短很多。这让行人很困扰。 现在，已知起点和终点，请你计算出要从起点到终点，最短需要行走多少距离。 输入描述本题目包含多组数据，请处理到文件结束。每组数据第一行包含两个正整数N和M(0&lt;N&lt;200,0&lt;M&lt;1000)，分别代表现有城镇的数目和已修建的道路的数目。城镇分别以0～N-1编号。接下来是M行道路信息。每一行有三个整数A,B,X(0&lt;=A,B&lt;N,A!=B,0&lt;X&lt;10000),表示城镇A和城镇B之间有一条长度为X的双向道路。再接下一行有两个整数S,T(0&lt;=S,T&lt;N)，分别代表起点和终点。 输出描述对于每组数据，请在一行里输出最短需要行走的距离。如果不存在从S到T的路线，就输出-1. 示例输入123456783 30 1 10 2 31 2 10 23 10 1 11 2 输出122-1 题解题目大意中文题面 思路最短路模板题，几种最短路的算法都能直接过。 代码Dijkstra12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;const int MAXN = 205, INF = 0x3f3f3f3f;using namespace std;int n, m;vector&lt;pair&lt;int, int&gt; &gt;E[MAXN];int d[MAXN], inq[MAXN];int main()&#123; while(cin &gt;&gt; n &gt;&gt; m)&#123; memset(d, INF, sizeof(d)); memset(inq, 0, sizeof(inq)); for(int i = 0; i &lt; MAXN; i++) E[i].clear(); for(int i = 0; i &lt; m; i++)&#123; int x, y, z; cin &gt;&gt; x &gt;&gt; y &gt;&gt; z; E[x].push_back(make_pair(y, z)); E[y].push_back(make_pair(x, z)); &#125; int s, t; cin &gt;&gt; s &gt;&gt; t; queue&lt;int&gt; que; que.push(s); d[s] = 0; inq[s] = 1; while(!que.empty())&#123; int now = que.front(); que.pop(); inq[now] = 0; for(int i = 0; i &lt; E[now].size(); i++)&#123; int v = E[now][i].first; if(d[v] &gt; d[now] + E[now][i].second)&#123; d[v] = d[now] + E[now][i].second; if(inq[v]) continue; inq[v] = 0; que.push(v); &#125; &#125; &#125; if(d[t] == INF) d[t] = -1; cout &lt;&lt; d[t] &lt;&lt; endl; &#125;&#125; Floyd123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;const int MAXN = 205, INF = 0x3f3f3f3f;using namespace std;int n, m;int mp[MAXN][MAXN];int main()&#123; while(cin &gt;&gt; n &gt;&gt; m)&#123; for(int i = 0; i &lt; n; i++)&#123; for(int j = 0; j &lt; n; j++)&#123; if(i == j) mp[i][j] = 0; else mp[i][j] = INF; &#125; &#125; for(int i = 0; i &lt; m; i++)&#123; int x, y, z; cin &gt;&gt; x &gt;&gt; y &gt;&gt; z; mp[x][y] = min(z, mp[x][y]); mp[y][x] = min(z, mp[y][x]); &#125; int s, t; cin &gt;&gt; s &gt;&gt;t; for(int k = 0; k &lt; n; k++) for(int i = 0; i &lt; n; i++) for(int j = 0; j &lt; n; j++) mp[i][j] = min(mp[i][k]+mp[k][j], mp[i][j]); if(mp[s][t] == INF) cout &lt;&lt; "-1" &lt;&lt;endl; else cout &lt;&lt; mp[s][t] &lt;&lt; endl; &#125;&#125; SPFA12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;bits/stdc++.h&gt;const int MAXN = 205, INF = 0x3f3f3f3f;using namespace std;int n, m, s, t;int inq[MAXN], dis[MAXN];vector&lt;pair&lt;int, int&gt; &gt;E[MAXN];int main()&#123; while(~scanf("%d %d", &amp;n, &amp;m))&#123; memset(dis, INF, sizeof(dis)); memset(inq, 0, sizeof(inq)); for(int i = 0; i &lt; MAXN; i++) E[i].clear(); for(int i = 0; i &lt; m; i++)&#123; int x, y, z; scanf("%d %d %d", &amp;x, &amp;y, &amp;z); E[x].push_back(make_pair(y, z)); E[y].push_back(make_pair(x, z)); &#125; scanf("%d %d", &amp;s, &amp;t); queue&lt;int&gt; que; dis[s] = 0; que.push(s); inq[s] = 1; while(!que.empty())&#123; int now = que.front(); que.pop();inq[now] = 0; for(int i = 0; i &lt; E[now].size(); i++)&#123; int v = E[now][i].first; if(dis[v] &gt; dis[now] + E[now][i].second)&#123; dis[v] = dis[now] + E[now][i].second; if(inq[v]) continue; inq[v] = 1; que.push(v); &#125; &#125; &#125; if(dis[t] == INF) printf("-1\n"); else printf("%d\n", dis[t]); &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU-1232 畅通工程（并查集）]]></title>
    <url>%2F2018%2F08%2F03%2FHDU-1232%20%E7%95%85%E9%80%9A%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1232 畅通工程 某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？ 输入描述测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。注意:两个城市之间可以有多条道路相通,也就是说3 31 21 22 1这种输入也是合法的当N为0时，输入结束，该用例不被处理。 输出描述对每个测试用例，在1行里输出最少还需要建设的道路数目。 示例输入1234567891011124 21 34 33 31 21 32 35 21 23 5999 00 输出1234102998 HintHuge input, scanf is recommended. 题解题目大意中文题面 思路最小生成树的边为n-1。初始化时每个城镇都没有路，所以要连接的路的数量为n-1个，一次判断两个城镇是否在一个集合内，若不在同一集合内则建边，并入同一集合中。 代码1234567891011121314151617181920212223242526272829303132333435#include &lt;bits/stdc++.h&gt;const int MAXN = 1e3 +5;using namespace std;int n, m;int F[MAXN];int Find(int x)&#123; if(F[x] == x) return x; else return Find(F[x]);&#125;bool Merge(int x, int y)&#123; x = Find(x); y = Find(y); if(x == y) return false; else F[x] = y; return true;&#125;int main()&#123; while(~scanf("%d", &amp;n))&#123; if(!n) break; for(int i = 0; i &lt;= n; i++) F[i] = i; scanf("%d", &amp;m); int res = n-1; for(int i = 0; i &lt; m; i++)&#123; int x, y; scanf("%d %d", &amp;x, &amp;y); if(Merge(x, y))&#123; res--; &#125; &#125; printf("%d\n", res); &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2456 Aggressive cows（贪心+二分 水题）]]></title>
    <url>%2F2018%2F08%2F02%2FPOJ-2456%20Aggressive%20cows%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-2456 Aggressive cows Farmer John has built a new long barn, with N (2 &lt;= N &lt;= 100,000) stalls. The stalls are located along a straight line at positions x1,…,xN (0 &lt;= xi &lt;= 1,000,000,000). His C (2 &lt;= C &lt;= N) cows don’t like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, FJ want to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance? 输入描述 Line 1: Two space-separated integers: N and C Lines 2..N+1: Line i+1 contains an integer stall location, xi 输出描述 Line 1: One integer: the largest minimum distance 示例输入1234565 312849 输出13 HintOUTPUT DETAILS: FJ can put his 3 cows in the stalls at positions 1, 4 and 8, resulting in a minimum distance of 3. Huge input data,scanf is recommended. 题解题目大意有n个牛栏，选m个放进牛，相当于一条线段上有 n 个点，选取 m 个点，使得相邻点之间的最小距离值最大。 思路先排序，再二分枚举相邻两牛的间距，判断大于等于此间距下能否放进所有的牛。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#define LL long longconst int INF = 0x3f3f3f3f;const int MAXN = 1e5 +10;using namespace std;int a[MAXN];int n, c;bool Judge(int m)&#123; int last = 0; for(int i = 1; i &lt; c; i++)&#123; int crt = last+1; while(crt &lt; n &amp;&amp; a[crt] -a[last] &lt; m)&#123; crt++; &#125; if(crt == n)&#123; return false; &#125; last = crt; &#125; return true;&#125;int main()&#123; scanf("%d%d", &amp;n, &amp;c); for(int i = 0; i &lt; n; i++)&#123; scanf("%d", &amp;a[i]); &#125; sort(a, a+n); int l = 0,r = INF; while(1 &lt; r-l)&#123; int mid = (l+r)&gt;&gt;1; if(Judge(mid))&#123; l = mid; &#125; else&#123; r = mid; &#125; &#125; printf("%d", l);&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>基础技巧</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1321 棋盘问题（DFS 水题）]]></title>
    <url>%2F2018%2F08%2F02%2FPOJ-1321%20%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[描述传送门：POJ-1321 棋盘问题 在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。 输入描述输入含有多组测试数据。每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n &lt;= 8 , k &lt;= n当为-1 -1时表示输入结束。随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。 输出描述对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C&lt;2^31）。 示例输入1234567892 1#..#4 4...#..#..#..#...-1 -1 输出1221 题解题目大意中文题面 思路DFS累计可行的方案数，因为题目要求不可以将棋子摆放在同一行和同一列，所以走过一列就把它标记下来下次的时候就不可以再摆放在这一列。然后就从下一行开始寻找可行的地方，直到摆放的棋子数与被要求摆放的棋子数相同时，就将方案数进行一次++，然后再进行递归下去。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;vector&gt;#include &lt;queue&gt;const int MAXN = 10;using namespace std;int n, k, cnt;int book[MAXN];char MAP[MAXN][MAXN];void dfs(int x, int y)&#123; if(y &gt;= k)&#123; cnt++; return; &#125; for(int i = x; i &lt; n; i++)&#123; for(int j = 0; j &lt; n; j++)&#123; if(MAP[i][j] == '#' &amp;&amp; !book[j])&#123; book[j] = 1; dfs(i+1, y+1); book[j] = 0; &#125; &#125; &#125;&#125;int main()&#123; while(cin &gt;&gt; n &gt;&gt; k)&#123; if(n == -1 &amp;&amp; k == -1) break; memset(book, 0, sizeof(book)); for(int i = 0; i &lt; n; i++) cin &gt;&gt;MAP[i]; cnt = 0; dfs(0, 0); cout &lt;&lt; cnt &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>简单搜索</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FZU-2150 Fire Game(双BFS)]]></title>
    <url>%2F2018%2F08%2F02%2FFZU-2150-Fire-Game%2F</url>
    <content type="text"><![CDATA[描述传送门：FZU-2150 Fire Game text url Fat brother and Maze are playing a kind of special (hentai) game on an N*M board (N rows, M columns). At the beginning, each grid of this board is consisting of grass or just empty and then they start to fire all the grass. Firstly they choose two grids which are consisting of grass and set fire. As we all know, the fire can spread among the grass. If the grid (x, y) is firing at time t, the grid which is adjacent to this grid will fire at time t+1 which refers to the grid (x+1, y), (x-1, y), (x, y+1), (x, y-1). This process ends when no new grid get fire. If then all the grid which are consisting of grass is get fired, Fat brother and Maze will stand in the middle of the grid and playing a MORE special (hentai) game. (Maybe it’s the OOXX game which decrypted in the last problem, who knows.) You can assume that the grass in the board would never burn out and the empty grid would never get fire. Note that the two grids they choose can be the same. 输入描述The first line of the date is an integer T, which is the number of the text cases. Then T cases follow, each case contains two integers N and M indicate the size of the board. Then goes N line, each line with M character shows the board. “#” Indicates the grass. You can assume that there is at least one grid which is consisting of grass in the board. 1 &lt;= T &lt;=100, 1 &lt;= n &lt;=10, 1 &lt;= m &lt;=10 输出描述For each case, output the case number first, if they can play the MORE special (hentai) game (fire all the grass), output the minimal time they need to wait after they set fire, otherwise just output -1. See the sample input and output for more details. 示例输入123456789101112131415161743 3.#.###.#.3 3.#.#.#.#.3 3...#.#...3 3###..##.# 输出1234Case 1: 1Case 2: -1Case 3: 0Case 4: 2 题解题目大意俩小孩放火，只有‘#’格子可燃，两人同时各点燃一个‘#’（可以是同一个），火可以向上向下向左向右在有草的格子蔓延，点火的地方时间为0，蔓延至下一格的时间依次加一，问最快多久能烧完‘#’，如不能烧完则输出“-1”。 思路依次枚举两个‘#’，然后双路BFS，同时维护最小时间min 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;vector&gt;#include &lt;queue&gt;#define LL long longconst int MAXN = 15, INF = 0x3f3f3f3f;using namespace std;int dx[] = &#123;1, -1, 0, 0&#125;;int dy[] = &#123;0, 0, 1, -1&#125;;int n, m;char MAP[MAXN][MAXN];int vis[MAXN][MAXN], book[MAXN][MAXN];struct node&#123; int x, y; &#125;now, nex;int bfs(int x1, int y1, int x2, int y2)&#123; memset(vis, INF, sizeof(vis)); queue&lt;node&gt; que; vis[x1][y1] = 0; vis[x2][y2] = 0; now.x = x1; now.y = y1; que.push(now); now.x = x2; now.y = y2; que.push(now); int res = 0; while(!que.empty())&#123; now = que.front(); que.pop(); for(int i = 0; i &lt; 4; i++)&#123; int xx = now.x+dx[i], yy = now.y+dy[i]; if(xx &gt;= 0 &amp;&amp; yy &gt;= 0 &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; MAP[xx][yy] == '#' &amp;&amp; vis[xx][yy] &gt; vis[now.x][now.y]+1)&#123; vis[xx][yy] = vis[now.x][now.y]+1; nex.x = xx; nex.y = yy; que.push(nex); &#125; &#125; &#125; for(int i = 0; i &lt; n; i++)&#123; for(int j = 0; j &lt; m; j++)&#123; if(MAP[i][j] == '#')&#123; res = max(res, vis[i][j]); &#125; &#125; &#125; return res;&#125;int main()&#123; int t, ans; cin &gt;&gt; t; for(int d = 1; d &lt;= t; d++)&#123; cin &gt;&gt; n &gt;&gt; m; for(int i = 0; i &lt; n; i ++)&#123; cin &gt;&gt; MAP[i]; &#125; int temp; ans = INF; for(int i = 0; i &lt; n; i++)&#123; for(int j = 0; j &lt; m; j++)&#123; if(MAP[i][j] == '#')&#123; for(int k = 0; k &lt; n; k++)&#123; for(int g = 0; g &lt; m; g++)&#123; if(MAP[k][g] == '#')&#123; temp = bfs(i, j, k, g); ans = min(ans, temp); &#125; &#125; &#125; &#125; &#125; &#125; if(ans == INF) ans = -1; cout &lt;&lt; "Case " &lt;&lt; d &lt;&lt; ": " &lt;&lt; ans &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>简单搜索</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU-1241 Oil Deposits(BFS or DFS 水题)]]></title>
    <url>%2F2018%2F08%2F02%2FHDU-1241%20Oil%20Deposits%20%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-1241 Oil Deposits The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid. 输入描述The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 &lt;= m &lt;= 100 and 1 &lt;= n &lt;= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either ‘*’, representing the absence of oil, or `@’, representing an oil pocket. 输出描述For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets. 示例输入1234567891011121314151 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0 输出12340122 题解题目大意判断有多少个‘@’的联通块，八个方向有接触就算在同一联通块内。 思路搜索入门题，直接暴力枚举每个点，DFS、BFS都可以，把搜索到的点标记下，维护下num标记即可。 代码BFS1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;vector&gt;#include &lt;queue&gt;#define LL long longconst int MAXN = 110;using namespace std;int dx[] = &#123;1, -1, 0, 0, 1, 1, -1, -1&#125;;int dy[] = &#123;0, 0, 1, -1, 1, -1, 1, -1&#125;;int m, n;char MAP[MAXN][MAXN];typedef pair&lt;int, int&gt;p;p e;void bfs(int x, int y)&#123; queue&lt;p&gt; que; que.push(p(x, y)); MAP[x][y] = '*'; while(!que.empty())&#123; e = que.front(); que.pop(); for(int i = 0; i &lt; 8; i++)&#123; int xx = e.first+dx[i], yy = e.second+dy[i]; if(xx &gt;= 0 &amp;&amp; yy &gt;= 0 &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; MAP[xx][yy] == '@')&#123; MAP[xx][yy] = '*'; que.push(p(xx, yy)); &#125; &#125; &#125;&#125;int main()&#123; while(cin &gt;&gt; n &gt;&gt; m)&#123; if(m == 0 &amp;&amp; n == 0) break; for(int i = 0; i &lt; n; i++)&#123; for(int j = 0; j &lt; m; j++)&#123; cin &gt;&gt;MAP[i][j]; &#125; &#125; int cnt = 0; for(int i = 0; i &lt; n; i++)&#123; for(int j = 0; j &lt; m; j++)&#123; if(MAP[i][j] == '@')&#123; bfs(i, j); cnt++; &#125; &#125; &#125; cout &lt;&lt; cnt &lt;&lt; endl; &#125;&#125; DFS123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;const int MAXN=100+10;int m,n,flag[MAXN][MAXN];char MAP[MAXN][MAXN];void dfs(int a,int b,int rt)&#123; if(a&lt;0 || b&lt;0 || a&gt;=m || b&gt;=n) return; if(flag[a][b]&gt;0 || MAP[a][b] != '@') return; flag[a][b] = rt; for(int i = -1; i &lt;= 1; i++)&#123; for(int j = -1;j &lt;= 1; j++)&#123; if(i !=0 || j != 0) dfs(a+i, b+j, rt); &#125; &#125;&#125;int main()&#123; while(scanf("%d%d",&amp;m,&amp;n))&#123; if(m==0&amp;&amp;n==0) return 0; for(int i=0;i&lt;m;i++) scanf("%s", MAP[i]); memset(flag,0,sizeof(flag)); int sum=0; for(int i=0;i&lt;m;i++) &#123; for(int j=0;j&lt;n;j++)&#123; if(flag[i][j]==0 &amp;&amp; MAP[i][j]=='@')&#123; dfs(i,j,++sum); &#125; &#125; &#125; printf("%d\n",sum); &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>简单搜索</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU-2612 Find a way（双BFS）]]></title>
    <url>%2F2018%2F08%2F02%2FHDU-2612-Find-a-way%2F</url>
    <content type="text"><![CDATA[描述传送门：HDU-2612 Find a way Pass a year learning in Hangzhou, yifenfei arrival hometown Ningbo at finally. Leave Ningbo one year, yifenfei have many people to meet. Especially a good friend Merceki.Yifenfei’s home is at the countryside, but Merceki’s home is in the center of city. So yifenfei made arrangements with Merceki to meet at a KFC. There are many KFC in Ningbo, they want to choose one that let the total time to it be most smallest.Now give you a Ningbo map, Both yifenfei and Merceki can move up, down ,left, right to the adjacent road by cost 11 minutes. 输入描述The input contains multiple test cases.Each test case include, first two integers n, m. (2&lt;=n,m&lt;=200).Next n lines, each line included m character.‘Y’ express yifenfei initial position.‘M’ express Merceki initial position.‘#’ forbid road;‘.’ Road.‘@’ KCF 输出描述For each test case output the minimum total time that both yifenfei and Merceki to arrival one of KFC.You may sure there is always have a KFC that can let them meet. 示例输入123456789101112131415164 4Y.#@.....#..@..M4 4Y.#@.....#..@#.M5 5Y..@..#....#...@..M.#...# 输出123668866 题解题目大意Y和M要去肯德基聚餐，图中有多个kfc，他们要选的那个kfc必须到彼此的所用时间之和最小，问最少需要多少时间。这里一格代表了11分钟。 思路以Y和M为起点各跑一次BFS，每个‘@’累加两次的最短路，最后遍历整张地图更新min。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;vector&gt;#include &lt;queue&gt;const int MAXN = 210, INF = 0x3f3f3f3f;using namespace std;int dx[] = &#123;0, 0, 1, -1&#125;;int dy[] = &#123;1, -1, 0, 0&#125;;int n, m;char MAP[MAXN][MAXN];int used[MAXN][MAXN], vis[MAXN][MAXN], book[MAXN][MAXN];struct node &#123; int x, y, dis; &#125;now, nex, Y, M;void bfs(node e)&#123; memset(used, 0, sizeof(used)); queue&lt;node&gt; que; que.push(e); while(!que.empty())&#123; now = que.front(); que.pop(); if(MAP[now.x][now.y] == '@')&#123; vis[now.x][now.y] += now.dis; book[now.x][now.y]++; &#125; for(int i = 0; i &lt; 4; i++)&#123; int xx = now.x+dx[i], yy = now.y+dy[i]; if(xx &gt;= 0 &amp;&amp; yy &gt;= 0 &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; !used[xx][yy])&#123; if(MAP[xx][yy] != '#')&#123; nex.x = xx; nex.y = yy; nex.dis = now.dis+1; que.push(nex); used[xx][yy] = 1; &#125; &#125; &#125; &#125;&#125;int main()&#123; while(cin &gt;&gt; n &gt;&gt; m)&#123; memset(vis, 0, sizeof(vis)); memset(book, 0, sizeof(book)); for(int i = 0; i &lt; n; i++)&#123; for(int j = 0; j &lt; m; j++)&#123; cin &gt;&gt; MAP[i][j]; if(MAP[i][j] == 'Y')&#123; Y.x = i; Y.y = j; Y.dis = 0; &#125; if(MAP[i][j] == 'M')&#123; M.x = i; M.y = j; M.dis = 0; &#125; &#125; &#125; bfs(Y); bfs(M); int ans = INF; for(int i = 0; i &lt; n; i++)&#123; for(int j = 0; j &lt; m; j++)&#123; if(book[i][j] == 2)&#123; ans = min(ans, vis[i][j]); &#125; &#125; &#125; cout &lt;&lt; ans*11 &lt;&lt; endl; &#125;&#125;]]></content>
      <categories>
        <category>题解</category>
        <category>简单搜索</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Start coding now]]></title>
    <url>%2F2018%2F08%2F02%2FStart-coding-now%2F</url>
    <content type="text"><![CDATA[虽然从去年年底就有考虑搭个主页，但一直拖到现在，也挺久的。趁着这两天系楼断网就在寝室按照网上的各路教程搞了一个，终于结束了，哈哈哈哈哈～折腾一番，有了自己的博客，另外知道了一点 Git 的知识，收藏夹里多了很多大佬的博客。以后坚持写写题解，写点技术性的东西，也能防止自己又堕落。很少能做到坚持一件事超过一个月，希望这次能坚持写下去吧。 Start coding now. 第一次搭建博客，好多地方都还不完善，欢迎大佬指点。留言系统来必应实在太丑了，虽然Gitment只能用GitHub登录，但考虑到博客的访问人群，先忍忍，等过几天就换过去。]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
</search>
